// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name IMQACore
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Compression
import CoreTelephony
import Darwin
import Foundation
import IMQACommon
import IMQADeviceInfo
import IMQAObjCUtilsInternal
import KSCrash
import Swift
import SwiftProtobuf
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.activity
import os.log
import os
@_inheritsConvenienceInitializers @objc public class IMQACoreResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AppLifecycleCaptureService : IMQACore.CaptureService {
  @objc convenience override dynamic public init()
  @objc deinit
  @objc override final public func onInstall()
}
@objc @_inheritsConvenienceInitializers open class CaptureService : ObjectiveC.NSObject {
  weak public var otel: IMQACore.IMQAOtel? {
    get
  }
  @IMQACommon.ThreadSafe public var state: IMQACore.CaptureServiceState {
    get
  }
  public func install(otel: IMQACore.IMQAOtel)
  public func start()
  public func stop()
  @objc open func onInstall()
  @objc open func onStart()
  @objc open func onStop()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class CaptureServiceBuilder : ObjectiveC.NSObject {
  @objc public func build() -> [IMQACore.CaptureService]
  @discardableResult
  @objc public func add(_ service: IMQACore.CaptureService) -> Self
  @discardableResult
  @objc public func remove(ofType type: Swift.AnyClass) -> Self
  @discardableResult
  @objc public func addAll() -> Self
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum CaptureServiceState : Swift.Int {
  case uninstalled
  case installed
  case active
  case paused
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(IMQACrashCaptureService) final public class CrashCaptureService : IMQACore.CaptureService {
  @objc convenience override dynamic public init()
  @objc override final public func onInstall()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(IMQAURLSessionCaptureService) final public class URLSessionCaptureService : IMQACore.CaptureService {
  @objc convenience override dynamic public init()
  @objc override final public func onInstall()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(IMQATapCaptureService) final public class TapCaptureService : IMQACore.CaptureService {
  @objc convenience override dynamic public init()
  @objc override final public func onInstall()
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func findTitle() -> Swift.String?
}
@_hasMissingDesignatedInitializers public class UIViewControllerHandler {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(IMQAViewCaptureService) final public class ViewCaptureService : IMQACore.CaptureService {
  @objc convenience override dynamic public init()
  @objc override final public func onInstall()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(IMQAWebViewCaptureService) final public class WebViewCaptureService : IMQACore.CaptureService {
  @objc convenience override dynamic public init()
  @objc override final public func onInstall()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class IMQA : ObjectiveC.NSObject {
  @objc public static var isDebug: Swift.Bool
  @objc deinit
}
extension IMQACore.IMQA {
  @discardableResult
  @objc public static func setup(options: IMQACore.IMQA.Options, isDebug: Swift.Bool = false) -> IMQACore.IMQA
  @objc dynamic public func start()
  @objc public static func setUserId(id: Swift.String?)
  @objc public static func getUserId() -> Swift.String?
  @objc public static func customLog(level: IMQACore.IMQA.LogLevel, message: Swift.String)
  @objc public static func setSharedSession(session: Swift.Bool)
  @objc public static func setAdvancedNetworkCapture(isCapture: Swift.Bool)
  @objc public static func sendClickEvent(buttonName: Swift.String, buttonClassName: Swift.String)
  @objc public static func setWebviewConfiguration(userContentController: WebKit.WKUserContentController)
}
@_hasMissingDesignatedInitializers public class IMQAOtel {
  @IMQACommon.ThreadSafe public var commonAttributes: [Swift.String : Swift.String] {
    get
    set
    _modify
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IMQADeviceInfoCollecter {
  @objc deinit
}
public struct UserSemantics {
  public static let userProfileUserDefaultKey: Swift.String
}
public struct IMQAUserModel {
  public static var id: Swift.String? {
    get
  }
  public static var name: Swift.String? {
    get
  }
  public static var email: Swift.String? {
    get
  }
  public static func setUserId(_ id: Swift.String?)
  public static func setUserName(_ name: Swift.String?)
  public static func setUserEmail(_ email: Swift.String?)
}
public struct ArrayWithCapacity<T> {
  public let capacity: Swift.Int
  public init(capacity: Swift.Int)
  public mutating func append(_ item: T)
}
extension IMQACore.ArrayWithCapacity : Swift.MutableCollection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> T {
    get
    set
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Element = T
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<IMQACore.ArrayWithCapacity<T>>
  public typealias Iterator = Swift.IndexingIterator<IMQACore.ArrayWithCapacity<T>>
  public typealias SubSequence = Swift.Slice<IMQACore.ArrayWithCapacity<T>>
}
@_hasMissingDesignatedInitializers open class AttributeArray : Swift.Hashable, Swift.Codable {
  public var values: [IMQACore.AttributeValue] {
    get
  }
  public static var empty: IMQACore.AttributeArray
  public var description: Swift.String {
    get
  }
  required public init(values: [IMQACore.AttributeValue])
  public static func == (lhs: IMQACore.AttributeArray, rhs: IMQACore.AttributeArray) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  open var hashValue: Swift.Int {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class AttributeSet : Swift.Hashable, Swift.Codable {
  public var labels: [Swift.String : IMQACore.AttributeValue] {
    get
  }
  public static var empty: IMQACore.AttributeSet
  required public init(labels: [Swift.String : IMQACore.AttributeValue])
  public static func == (lhs: IMQACore.AttributeSet, rhs: IMQACore.AttributeSet) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  open var hashValue: Swift.Int {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
}
public enum AttributeValue : Swift.Equatable, Swift.CustomStringConvertible, Swift.Hashable {
  case string(Swift.String)
  case bool(Swift.Bool)
  case int(Swift.Int)
  case double(Swift.Double)
  @available(*, deprecated, message: "replaced by .array(AttributeArray)")
  case stringArray([Swift.String])
  @available(*, deprecated, message: "replaced by .array(AttributeArray)")
  case boolArray([Swift.Bool])
  @available(*, deprecated, message: "replaced by .array(AttributeArray)")
  case intArray([Swift.Int])
  @available(*, deprecated, message: "replaced by .array(AttributeArray)")
  case doubleArray([Swift.Double])
  case array(IMQACore.AttributeArray)
  case set(IMQACore.AttributeSet)
  public var description: Swift.String {
    get
  }
  public init?(_ value: Any)
  public static func == (a: IMQACore.AttributeValue, b: IMQACore.AttributeValue) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.AttributeValue {
  public init(_ value: Swift.String)
  public init(_ value: Swift.Bool)
  public init(_ value: Swift.Int)
  public init(_ value: Swift.Double)
  public init(_ value: [Swift.String])
  public init(_ value: [Swift.Int])
  public init(_ value: [Swift.Double])
  public init(_ value: [Swift.Bool])
  public init(_ value: IMQACore.AttributeArray)
  public init(_ value: IMQACore.AttributeSet)
}
extension IMQACore.AttributeValue : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AttributesDictionary {
  public init(capacity: Swift.Int, valueLengthLimit: Swift.Int = Int.max)
  public subscript(key: Swift.String) -> IMQACore.AttributeValue? {
    get
    set
  }
  @discardableResult
  public mutating func updateValue(value: IMQACore.AttributeValue, forKey key: Swift.String) -> IMQACore.AttributeValue?
  public mutating func updateValues(attributes: [Swift.String : IMQACore.AttributeValue])
  public mutating func updateValues(attributes: IMQACore.AttributesDictionary)
  public mutating func removeValueForKey(key: Swift.String) -> IMQACore.AttributeValue?
  public mutating func removeAll(keepCapacity: Swift.Int)
  public var count: Swift.Int {
    get
  }
  public var numberOfDroppedAttributes: Swift.Int {
    get
  }
  public var values: [IMQACore.AttributeValue] {
    get
  }
}
extension IMQACore.AttributesDictionary : Swift.Sequence {
  public func makeIterator() -> IMQACore.AttributesWithCapacityIterator
  public typealias Element = (Swift.String, IMQACore.AttributeValue)
  public typealias Iterator = IMQACore.AttributesWithCapacityIterator
}
public struct AttributesWithCapacityIterator : Swift.IteratorProtocol {
  public mutating func next() -> (Swift.String, IMQACore.AttributeValue)?
  public typealias Element = (Swift.String, IMQACore.AttributeValue)
}
public protocol Clock : AnyObject {
  var now: Foundation.Date { get }
}
extension IMQACore.Clock {
  public var nanoTime: Swift.UInt64 {
    get
  }
}
public func == (lhs: any IMQACore.Clock, rhs: any IMQACore.Clock) -> Swift.Bool
public protocol ContextManager : AnyObject {
  func getCurrentContextValue(forKey: IMQACore.OpenTelemetryContextKeys) -> Swift.AnyObject?
  func setCurrentContextValue(forKey: IMQACore.OpenTelemetryContextKeys, value: Swift.AnyObject)
  func removeContextValue(forKey: IMQACore.OpenTelemetryContextKeys, value: Swift.AnyObject)
  func withCurrentContextValue<T>(forKey: IMQACore.OpenTelemetryContextKeys, value: Swift.AnyObject?, _ operation: () throws -> T) rethrows -> T
}
public protocol ImperativeContextManager : IMQACore.ContextManager {
}
extension IMQACore.ContextManager where Self : IMQACore.ImperativeContextManager {
  public func withCurrentContextValue<T>(forKey key: IMQACore.OpenTelemetryContextKeys, value: Swift.AnyObject?, _ operation: () throws -> T) rethrows -> T
}
public struct CustomCommonAdapter {
  public static func toProtoAttribute(key: Swift.String, attributeValue: IMQACore.AttributeValue) -> IMQACore.Opentelemetry_Proto_Common_V1_KeyValue
  public static func toProtoAnyValue(attributeValue: IMQACore.AttributeValue) -> IMQACore.Opentelemetry_Proto_Common_V1_AnyValue
  public static func toProtoInstrumentationScope(instrumentationScopeInfo: IMQACore.InstrumentationScopeInfo) -> IMQACore.Opentelemetry_Proto_Common_V1_InstrumentationScope
}
@_hasMissingDesignatedInitializers public class CustomLogRecordAdapter {
  public static func toProtoResourceRecordLog(logRecordList: [IMQACore.ReadableLogRecord]) -> [IMQACore.Opentelemetry_Proto_Logs_V1_ResourceLogs]
  @objc deinit
}
public enum CustomCompressionType {
  case gzip
  case deflate
  case none
  public static func == (a: IMQACore.CustomCompressionType, b: IMQACore.CustomCompressionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CustomOtlpConfiguration {
  public static let DefaultTimeoutInterval: Foundation.TimeInterval
  public let headers: [(Swift.String, Swift.String)]?
  public let timeout: Foundation.TimeInterval
  public let compression: IMQACore.CustomCompressionType
  public let exportAsJson: Swift.Bool
  public init(timeout: Foundation.TimeInterval = CustomOtlpConfiguration.DefaultTimeoutInterval, compression: IMQACore.CustomCompressionType = .gzip, headers: [(Swift.String, Swift.String)]? = nil, exportAsJson: Swift.Bool = true)
}
public struct CustomOtlpSpan : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CustomResourceAdapter {
  public static func toProtoResource(resource: IMQACore.Resource) -> IMQACore.Opentelemetry_Proto_Resource_V1_Resource
}
public struct CustomSpanAdapter {
  public static func toProtoResourceSpans(spanDataList: [IMQACore.SpanData]) -> [IMQACore.Opentelemetry_Proto_Trace_V1_ResourceSpans]
  public static func toProtoSpan(spanData: IMQACore.SpanData) -> IMQACore.Opentelemetry_Proto_Trace_V1_Span
  public static func toProtoSpanKind(kind: IMQACore.SpanKind) -> IMQACore.Opentelemetry_Proto_Trace_V1_Span.SpanKind
  public static func toProtoSpanEvent(event: IMQACore.SpanData.Event) -> IMQACore.Opentelemetry_Proto_Trace_V1_Span.Event
  public static func toProtoSpanLink(link: IMQACore.SpanData.Link) -> IMQACore.Opentelemetry_Proto_Trace_V1_Span.Link
  public static func toStatusProto(status: IMQACore.Status) -> IMQACore.Opentelemetry_Proto_Trace_V1_Status
}
public struct Opentelemetry_Proto_Common_V1_AnyValue {
  public var value: IMQACore.Opentelemetry_Proto_Common_V1_AnyValue.OneOf_Value?
  public var stringValue: Swift.String {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
  public var intValue: Swift.Int64 {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var arrayValue: IMQACore.Opentelemetry_Proto_Common_V1_ArrayValue {
    get
    set
  }
  public var kvlistValue: IMQACore.Opentelemetry_Proto_Common_V1_KeyValueList {
    get
    set
  }
  public var bytesValue: Foundation.Data {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Value : Swift.Equatable {
    case stringValue(Swift.String)
    case boolValue(Swift.Bool)
    case intValue(Swift.Int64)
    case doubleValue(Swift.Double)
    case arrayValue(IMQACore.Opentelemetry_Proto_Common_V1_ArrayValue)
    case kvlistValue(IMQACore.Opentelemetry_Proto_Common_V1_KeyValueList)
    case bytesValue(Foundation.Data)
    public static func == (a: IMQACore.Opentelemetry_Proto_Common_V1_AnyValue.OneOf_Value, b: IMQACore.Opentelemetry_Proto_Common_V1_AnyValue.OneOf_Value) -> Swift.Bool
  }
  public init()
}
public struct Opentelemetry_Proto_Common_V1_ArrayValue {
  public var values: [IMQACore.Opentelemetry_Proto_Common_V1_AnyValue]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Common_V1_KeyValueList {
  public var values: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Common_V1_KeyValue {
  public var key: Swift.String
  public var value: IMQACore.Opentelemetry_Proto_Common_V1_AnyValue {
    get
    set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public mutating func clearValue()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Common_V1_InstrumentationScope {
  public var name: Swift.String
  public var version: Swift.String
  public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var droppedAttributesCount: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension IMQACore.Opentelemetry_Proto_Common_V1_AnyValue : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Common_V1_AnyValue.OneOf_Value : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Common_V1_ArrayValue : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Common_V1_KeyValueList : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Common_V1_KeyValue : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Common_V1_InstrumentationScope : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Common_V1_AnyValue : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Common_V1_AnyValue, rhs: IMQACore.Opentelemetry_Proto_Common_V1_AnyValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Common_V1_ArrayValue : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Common_V1_ArrayValue, rhs: IMQACore.Opentelemetry_Proto_Common_V1_ArrayValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Common_V1_KeyValueList : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Common_V1_KeyValueList, rhs: IMQACore.Opentelemetry_Proto_Common_V1_KeyValueList) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Common_V1_KeyValue : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Common_V1_KeyValue, rhs: IMQACore.Opentelemetry_Proto_Common_V1_KeyValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Common_V1_InstrumentationScope : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Common_V1_InstrumentationScope, rhs: IMQACore.Opentelemetry_Proto_Common_V1_InstrumentationScope) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum Opentelemetry_Proto_Logs_V1_SeverityNumber : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case unspecified
  case trace
  case trace2
  case trace3
  case trace4
  case debug
  case debug2
  case debug3
  case debug4
  case info
  case info2
  case info3
  case info4
  case warn
  case warn2
  case warn3
  case warn4
  case error
  case error2
  case error3
  case error4
  case fatal
  case fatal2
  case fatal3
  case fatal4
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_SeverityNumber : Swift.CaseIterable {
  public static var allCases: [IMQACore.Opentelemetry_Proto_Logs_V1_SeverityNumber]
  public typealias AllCases = [IMQACore.Opentelemetry_Proto_Logs_V1_SeverityNumber]
}
public enum Opentelemetry_Proto_Logs_V1_LogRecordFlags : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case doNotUse
  case traceFlagsMask
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_LogRecordFlags : Swift.CaseIterable {
  public static var allCases: [IMQACore.Opentelemetry_Proto_Logs_V1_LogRecordFlags]
  public typealias AllCases = [IMQACore.Opentelemetry_Proto_Logs_V1_LogRecordFlags]
}
public struct Opentelemetry_Proto_Logs_V1_LogsData {
  public var resourceLogs: [IMQACore.Opentelemetry_Proto_Logs_V1_ResourceLogs]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Logs_V1_ResourceLogs {
  public var resource: IMQACore.Opentelemetry_Proto_Resource_V1_Resource {
    get
    set
  }
  public var hasResource: Swift.Bool {
    get
  }
  public mutating func clearResource()
  public var scopeLogs: [IMQACore.Opentelemetry_Proto_Logs_V1_ScopeLogs]
  public var schemaURL: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Logs_V1_ScopeLogs {
  public var scope: IMQACore.Opentelemetry_Proto_Common_V1_InstrumentationScope {
    get
    set
  }
  public var hasScope: Swift.Bool {
    get
  }
  public mutating func clearScope()
  public var logRecords: [IMQACore.Opentelemetry_Proto_Logs_V1_LogRecord]
  public var schemaURL: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Logs_V1_LogRecord {
  public var timeUnixNano: Swift.UInt64
  public var observedTimeUnixNano: Swift.UInt64
  public var severityNumber: IMQACore.Opentelemetry_Proto_Logs_V1_SeverityNumber
  public var severityText: Swift.String
  public var body: IMQACore.Opentelemetry_Proto_Common_V1_AnyValue {
    get
    set
  }
  public var hasBody: Swift.Bool {
    get
  }
  public mutating func clearBody()
  public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var droppedAttributesCount: Swift.UInt32
  public var flags: Swift.UInt32
  public var traceID: Foundation.Data
  public var spanID: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_SeverityNumber : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_LogRecordFlags : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_LogsData : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_ResourceLogs : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_ScopeLogs : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_LogRecord : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_SeverityNumber : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_LogRecordFlags : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_LogsData : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Logs_V1_LogsData, rhs: IMQACore.Opentelemetry_Proto_Logs_V1_LogsData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_ResourceLogs : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Logs_V1_ResourceLogs, rhs: IMQACore.Opentelemetry_Proto_Logs_V1_ResourceLogs) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_ScopeLogs : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Logs_V1_ScopeLogs, rhs: IMQACore.Opentelemetry_Proto_Logs_V1_ScopeLogs) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_LogRecord : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Logs_V1_LogRecord, rhs: IMQACore.Opentelemetry_Proto_Logs_V1_LogRecord) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest {
  public var resourceLogs: [IMQACore.Opentelemetry_Proto_Logs_V1_ResourceLogs]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse {
  public var partialSuccess: IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess {
    get
    set
  }
  public var hasPartialSuccess: Swift.Bool {
    get
  }
  public mutating func clearPartialSuccess()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess {
  public var rejectedLogRecords: Swift.Int64
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest, rhs: IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse, rhs: IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess, rhs: IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum Opentelemetry_Proto_Metrics_V1_AggregationTemporality : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case unspecified
  case delta
  case cumulative
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_AggregationTemporality : Swift.CaseIterable {
  public static var allCases: [IMQACore.Opentelemetry_Proto_Metrics_V1_AggregationTemporality]
  public typealias AllCases = [IMQACore.Opentelemetry_Proto_Metrics_V1_AggregationTemporality]
}
public enum Opentelemetry_Proto_Metrics_V1_DataPointFlags : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case doNotUse
  case noRecordedValueMask
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_DataPointFlags : Swift.CaseIterable {
  public static var allCases: [IMQACore.Opentelemetry_Proto_Metrics_V1_DataPointFlags]
  public typealias AllCases = [IMQACore.Opentelemetry_Proto_Metrics_V1_DataPointFlags]
}
public struct Opentelemetry_Proto_Metrics_V1_MetricsData {
  public var resourceMetrics: [IMQACore.Opentelemetry_Proto_Metrics_V1_ResourceMetrics]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_ResourceMetrics {
  public var resource: IMQACore.Opentelemetry_Proto_Resource_V1_Resource {
    get
    set
  }
  public var hasResource: Swift.Bool {
    get
  }
  public mutating func clearResource()
  public var scopeMetrics: [IMQACore.Opentelemetry_Proto_Metrics_V1_ScopeMetrics]
  public var schemaURL: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_ScopeMetrics {
  public var scope: IMQACore.Opentelemetry_Proto_Common_V1_InstrumentationScope {
    get
    set
  }
  public var hasScope: Swift.Bool {
    get
  }
  public mutating func clearScope()
  public var metrics: [IMQACore.Opentelemetry_Proto_Metrics_V1_Metric]
  public var schemaURL: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Metric {
  public var name: Swift.String
  public var description_p: Swift.String
  public var unit: Swift.String
  public var data: IMQACore.Opentelemetry_Proto_Metrics_V1_Metric.OneOf_Data?
  public var gauge: IMQACore.Opentelemetry_Proto_Metrics_V1_Gauge {
    get
    set
  }
  public var sum: IMQACore.Opentelemetry_Proto_Metrics_V1_Sum {
    get
    set
  }
  public var histogram: IMQACore.Opentelemetry_Proto_Metrics_V1_Histogram {
    get
    set
  }
  public var exponentialHistogram: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram {
    get
    set
  }
  public var summary: IMQACore.Opentelemetry_Proto_Metrics_V1_Summary {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Data : Swift.Equatable {
    case gauge(IMQACore.Opentelemetry_Proto_Metrics_V1_Gauge)
    case sum(IMQACore.Opentelemetry_Proto_Metrics_V1_Sum)
    case histogram(IMQACore.Opentelemetry_Proto_Metrics_V1_Histogram)
    case exponentialHistogram(IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram)
    case summary(IMQACore.Opentelemetry_Proto_Metrics_V1_Summary)
    public static func == (a: IMQACore.Opentelemetry_Proto_Metrics_V1_Metric.OneOf_Data, b: IMQACore.Opentelemetry_Proto_Metrics_V1_Metric.OneOf_Data) -> Swift.Bool
  }
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Gauge {
  public var dataPoints: [IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Sum {
  public var dataPoints: [IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint]
  public var aggregationTemporality: IMQACore.Opentelemetry_Proto_Metrics_V1_AggregationTemporality
  public var isMonotonic: Swift.Bool
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Histogram {
  public var dataPoints: [IMQACore.Opentelemetry_Proto_Metrics_V1_HistogramDataPoint]
  public var aggregationTemporality: IMQACore.Opentelemetry_Proto_Metrics_V1_AggregationTemporality
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_ExponentialHistogram {
  public var dataPoints: [IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint]
  public var aggregationTemporality: IMQACore.Opentelemetry_Proto_Metrics_V1_AggregationTemporality
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Summary {
  public var dataPoints: [IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_NumberDataPoint {
  public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var startTimeUnixNano: Swift.UInt64
  public var timeUnixNano: Swift.UInt64
  public var value: IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint.OneOf_Value?
  public var asDouble: Swift.Double {
    get
    set
  }
  public var asInt: Swift.Int64 {
    get
    set
  }
  public var exemplars: [IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar]
  public var flags: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Value : Swift.Equatable {
    case asDouble(Swift.Double)
    case asInt(Swift.Int64)
    public static func == (a: IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint.OneOf_Value, b: IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint.OneOf_Value) -> Swift.Bool
  }
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_HistogramDataPoint {
  public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var startTimeUnixNano: Swift.UInt64
  public var timeUnixNano: Swift.UInt64
  public var count: Swift.UInt64
  public var sum: Swift.Double {
    get
    set
  }
  public var hasSum: Swift.Bool {
    get
  }
  public mutating func clearSum()
  public var bucketCounts: [Swift.UInt64]
  public var explicitBounds: [Swift.Double]
  public var exemplars: [IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar]
  public var flags: Swift.UInt32
  public var min: Swift.Double {
    get
    set
  }
  public var hasMin: Swift.Bool {
    get
  }
  public mutating func clearMin()
  public var max: Swift.Double {
    get
    set
  }
  public var hasMax: Swift.Bool {
    get
  }
  public mutating func clearMax()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint {
  public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var startTimeUnixNano: Swift.UInt64
  public var timeUnixNano: Swift.UInt64
  public var count: Swift.UInt64
  public var sum: Swift.Double {
    get
    set
  }
  public var hasSum: Swift.Bool {
    get
  }
  public mutating func clearSum()
  public var scale: Swift.Int32
  public var zeroCount: Swift.UInt64
  public var positive: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets {
    get
    set
  }
  public var hasPositive: Swift.Bool {
    get
  }
  public mutating func clearPositive()
  public var negative: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets {
    get
    set
  }
  public var hasNegative: Swift.Bool {
    get
  }
  public mutating func clearNegative()
  public var flags: Swift.UInt32
  public var exemplars: [IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar]
  public var min: Swift.Double {
    get
    set
  }
  public var hasMin: Swift.Bool {
    get
  }
  public mutating func clearMin()
  public var max: Swift.Double {
    get
    set
  }
  public var hasMax: Swift.Bool {
    get
  }
  public mutating func clearMax()
  public var zeroThreshold: Swift.Double
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public struct Buckets {
    public var offset: Swift.Int32
    public var bucketCounts: [Swift.UInt64]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_SummaryDataPoint {
  public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var startTimeUnixNano: Swift.UInt64
  public var timeUnixNano: Swift.UInt64
  public var count: Swift.UInt64
  public var sum: Swift.Double
  public var quantileValues: [IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint.ValueAtQuantile]
  public var flags: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public struct ValueAtQuantile {
    public var quantile: Swift.Double
    public var value: Swift.Double
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Exemplar {
  public var filteredAttributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var timeUnixNano: Swift.UInt64
  public var value: IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar.OneOf_Value?
  public var asDouble: Swift.Double {
    get
    set
  }
  public var asInt: Swift.Int64 {
    get
    set
  }
  public var spanID: Foundation.Data
  public var traceID: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Value : Swift.Equatable {
    case asDouble(Swift.Double)
    case asInt(Swift.Int64)
    public static func == (a: IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar.OneOf_Value, b: IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar.OneOf_Value) -> Swift.Bool
  }
  public init()
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_AggregationTemporality : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_DataPointFlags : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_MetricsData : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ResourceMetrics : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ScopeMetrics : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Metric : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Metric.OneOf_Data : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Gauge : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Sum : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Histogram : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Summary : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint.OneOf_Value : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_HistogramDataPoint : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint.ValueAtQuantile : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar.OneOf_Value : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_AggregationTemporality : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_DataPointFlags : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_MetricsData : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_MetricsData, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_MetricsData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ResourceMetrics : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ResourceMetrics, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ResourceMetrics) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ScopeMetrics : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ScopeMetrics, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ScopeMetrics) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Metric : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Metric, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Metric) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Gauge : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Gauge, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Gauge) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Sum : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Sum, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Sum) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Histogram : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Histogram, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Histogram) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Summary : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Summary, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Summary) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_HistogramDataPoint : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_HistogramDataPoint, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_HistogramDataPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint.ValueAtQuantile : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint.ValueAtQuantile, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint.ValueAtQuantile) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest {
  public var resourceMetrics: [IMQACore.Opentelemetry_Proto_Metrics_V1_ResourceMetrics]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse {
  public var partialSuccess: IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess {
    get
    set
  }
  public var hasPartialSuccess: Swift.Bool {
    get
  }
  public mutating func clearPartialSuccess()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess {
  public var rejectedDataPoints: Swift.Int64
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest, rhs: IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse, rhs: IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess, rhs: IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Opentelemetry_Proto_Resource_V1_Resource {
  public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var droppedAttributesCount: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension IMQACore.Opentelemetry_Proto_Resource_V1_Resource : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Resource_V1_Resource : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Resource_V1_Resource, rhs: IMQACore.Opentelemetry_Proto_Resource_V1_Resource) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Opentelemetry_Proto_Trace_V1_TracesData {
  public var resourceSpans: [IMQACore.Opentelemetry_Proto_Trace_V1_ResourceSpans]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Trace_V1_ResourceSpans {
  public var resource: IMQACore.Opentelemetry_Proto_Resource_V1_Resource {
    get
    set
  }
  public var hasResource: Swift.Bool {
    get
  }
  public mutating func clearResource()
  public var scopeSpans: [IMQACore.Opentelemetry_Proto_Trace_V1_ScopeSpans]
  public var schemaURL: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Trace_V1_ScopeSpans {
  public var scope: IMQACore.Opentelemetry_Proto_Common_V1_InstrumentationScope {
    get
    set
  }
  public var hasScope: Swift.Bool {
    get
  }
  public mutating func clearScope()
  public var spans: [IMQACore.Opentelemetry_Proto_Trace_V1_Span]
  public var schemaURL: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Trace_V1_Span {
  public var traceID: Foundation.Data
  public var spanID: Foundation.Data
  public var traceState: Swift.String
  public var parentSpanID: Foundation.Data
  public var name: Swift.String
  public var kind: IMQACore.Opentelemetry_Proto_Trace_V1_Span.SpanKind
  public var startTimeUnixNano: Swift.UInt64
  public var endTimeUnixNano: Swift.UInt64
  public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var droppedAttributesCount: Swift.UInt32
  public var events: [IMQACore.Opentelemetry_Proto_Trace_V1_Span.Event]
  public var droppedEventsCount: Swift.UInt32
  public var links: [IMQACore.Opentelemetry_Proto_Trace_V1_Span.Link]
  public var droppedLinksCount: Swift.UInt32
  public var status: IMQACore.Opentelemetry_Proto_Trace_V1_Status {
    get
    set
  }
  public var hasStatus: Swift.Bool {
    get
  }
  public mutating func clearStatus()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum SpanKind : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case unspecified
    case `internal`
    case server
    case client
    case producer
    case consumer
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public struct Event {
    public var timeUnixNano: Swift.UInt64
    public var name: Swift.String
    public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
    public var droppedAttributesCount: Swift.UInt32
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Link {
    public var traceID: Foundation.Data
    public var spanID: Foundation.Data
    public var traceState: Swift.String
    public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
    public var droppedAttributesCount: Swift.UInt32
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span.SpanKind : Swift.CaseIterable {
  public static var allCases: [IMQACore.Opentelemetry_Proto_Trace_V1_Span.SpanKind]
  public typealias AllCases = [IMQACore.Opentelemetry_Proto_Trace_V1_Span.SpanKind]
}
public struct Opentelemetry_Proto_Trace_V1_Status {
  public var message: Swift.String
  public var code: IMQACore.Opentelemetry_Proto_Trace_V1_Status.StatusCode
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum StatusCode : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case unset
    case ok
    case error
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Status.StatusCode : Swift.CaseIterable {
  public static var allCases: [IMQACore.Opentelemetry_Proto_Trace_V1_Status.StatusCode]
  public typealias AllCases = [IMQACore.Opentelemetry_Proto_Trace_V1_Status.StatusCode]
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_TracesData : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_ResourceSpans : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_ScopeSpans : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span.SpanKind : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span.Event : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span.Link : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Status : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Status.StatusCode : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_TracesData : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Trace_V1_TracesData, rhs: IMQACore.Opentelemetry_Proto_Trace_V1_TracesData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_ResourceSpans : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Trace_V1_ResourceSpans, rhs: IMQACore.Opentelemetry_Proto_Trace_V1_ResourceSpans) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_ScopeSpans : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Trace_V1_ScopeSpans, rhs: IMQACore.Opentelemetry_Proto_Trace_V1_ScopeSpans) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Trace_V1_Span, rhs: IMQACore.Opentelemetry_Proto_Trace_V1_Span) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span.SpanKind : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span.Event : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Trace_V1_Span.Event, rhs: IMQACore.Opentelemetry_Proto_Trace_V1_Span.Event) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span.Link : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Trace_V1_Span.Link, rhs: IMQACore.Opentelemetry_Proto_Trace_V1_Span.Link) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Status : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Trace_V1_Status, rhs: IMQACore.Opentelemetry_Proto_Trace_V1_Status) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Status.StatusCode : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
public struct Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest {
  public var resourceSpans: [IMQACore.Opentelemetry_Proto_Trace_V1_ResourceSpans]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse {
  public var partialSuccess: IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess {
    get
    set
  }
  public var hasPartialSuccess: Swift.Bool {
    get
  }
  public mutating func clearPartialSuccess()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess {
  public var rejectedSpans: Swift.Int64
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest, rhs: IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse, rhs: IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess, rhs: IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class DefaultLogger : IMQACore.Logger {
  public func eventBuilder(name: Swift.String) -> any IMQACore.EventBuilder
  public func logRecordBuilder() -> any IMQACore.LogRecordBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultLoggerProvider : IMQACore.LoggerProvider {
  public static let instance: any IMQACore.LoggerProvider
  public func get(instrumentationScopeName: Swift.String) -> any IMQACore.Logger
  public func loggerBuilder(instrumentationScopeName: Swift.String) -> any IMQACore.LoggerBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultTracer : IMQACore.Tracer {
  public static var instance: IMQACore.DefaultTracer
  public func spanBuilder(spanName: Swift.String) -> any IMQACore.SpanBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultTracerProvider : IMQACore.TracerProvider {
  public static let instance: IMQACore.DefaultTracerProvider
  public func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String? = nil) -> any IMQACore.Tracer
  @objc deinit
}
public struct EnvVarResource {
  public static let resource: IMQACore.Resource
  public static func get(environment: [Swift.String : Swift.String] = ProcessInfo.processInfo.environment) -> IMQACore.Resource
}
public struct EnvironmentContextPropagator : IMQACore.TextMapPropagator {
  public let fields: Swift.Set<Swift.String>
  public init()
  public func inject<S>(spanContext: IMQACore.SpanContext, carrier: inout [Swift.String : Swift.String], setter: S) where S : IMQACore.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> IMQACore.SpanContext? where G : IMQACore.Getter
}
public protocol EventBuilder : IMQACore.LogRecordBuilder {
  func setData(_ attributes: [Swift.String : IMQACore.AttributeValue]) -> Self
}
public enum ExportResult {
  case success
  case failure
  public static func == (a: IMQACore.ExportResult, b: IMQACore.ExportResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol IdGenerator {
  func generateSpanId() -> IMQACore.SpanId
  func generateTraceId() -> IMQACore.TraceId
}
public struct InstrumentationScopeInfo : Swift.Hashable, Swift.Codable, Swift.Equatable {
  public var name: Swift.String {
    get
  }
  public var version: Swift.String? {
    get
  }
  public var schemaUrl: Swift.String? {
    get
  }
  public init()
  public init(name: Swift.String, version: Swift.String? = nil, schemaUrl: Swift.String? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: IMQACore.InstrumentationScopeInfo, b: IMQACore.InstrumentationScopeInfo) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct LogLimits {
  public static let defaultMaxAttributeCount: Swift.Int
  public static let defaultMaxAttributeLength: Swift.Int
  public let maxAttributeCount: Swift.Int
  public let maxAttributeLength: Swift.Int
  public init(maxAttributeCount: Swift.Int = Self.defaultMaxAttributeCount, maxAttributeLength: Swift.Int = Self.defaultMaxAttributeLength)
}
public protocol LogRecordBuilder {
  func setTimestamp(_ timestamp: Foundation.Date) -> Self
  func setObservedTimestamp(_ observed: Foundation.Date) -> Self
  func setSpanContext(_ context: IMQACore.SpanContext) -> Self
  func setSeverity(_ severity: IMQACore.Severity) -> Self
  func setBody(_ body: IMQACore.AttributeValue) -> Self
  func setAttributes(_ attributes: [Swift.String : IMQACore.AttributeValue]) -> Self
  func emit()
}
@_hasMissingDesignatedInitializers public class LogRecordBuilderSdk : IMQACore.EventBuilder {
  public func setTimestamp(_ timestamp: Foundation.Date) -> Self
  public func setObservedTimestamp(_ observed: Foundation.Date) -> Self
  public func setSpanContext(_ context: IMQACore.SpanContext) -> Self
  public func setSeverity(_ severity: IMQACore.Severity) -> Self
  public func setBody(_ body: IMQACore.AttributeValue) -> Self
  public func setAttributes(_ attributes: [Swift.String : IMQACore.AttributeValue]) -> Self
  public func setData(_ attributes: [Swift.String : IMQACore.AttributeValue]) -> Self
  public func emit()
  @objc deinit
}
public protocol LogRecordExporter {
  func export(logRecords: [IMQACore.ReadableLogRecord], explicitTimeout: Foundation.TimeInterval?) -> IMQACore.ExportResult
  func shutdown(explicitTimeout: Foundation.TimeInterval?)
  func forceFlush(explicitTimeout: Foundation.TimeInterval?) -> IMQACore.ExportResult
}
extension IMQACore.LogRecordExporter {
  public func export(logRecords: [IMQACore.ReadableLogRecord]) -> IMQACore.ExportResult
  public func shutdown()
  public func forceFlush() -> IMQACore.ExportResult
}
public protocol LogRecordProcessor {
  func onEmit(logRecord: IMQACore.ReadableLogRecord)
  func forceFlush(explicitTimeout: Foundation.TimeInterval?) -> IMQACore.ExportResult
  func shutdown(explicitTimeout: Foundation.TimeInterval?) -> IMQACore.ExportResult
}
extension IMQACore.LogRecordProcessor {
  public func forceFlush() -> IMQACore.ExportResult
  public func shutdown() -> IMQACore.ExportResult
}
@objc public enum LogSeverity : Swift.Int, Swift.Codable {
  case trace = 1
  case debug = 5
  case info = 9
  case warn = 13
  case error = 17
  case fatal = 24
  public var text: Swift.String {
    get
  }
  public var number: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension IMQACore.LogSeverity : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public protocol Logger {
  func eventBuilder(name: Swift.String) -> any IMQACore.EventBuilder
  func logRecordBuilder() -> any IMQACore.LogRecordBuilder
}
public protocol LoggerBuilder {
  func setEventDomain(_ eventDomain: Swift.String) -> Self
  func setSchemaUrl(_ schemaUrl: Swift.String) -> Self
  func setInstrumentationVersion(_ instrumentationVersion: Swift.String) -> Self
  func setIncludeTraceContext(_ includeTraceContext: Swift.Bool) -> Self
  func setAttributes(_ attributes: [Swift.String : IMQACore.AttributeValue]) -> Self
  func build() -> any IMQACore.Logger
}
public protocol LoggerProvider : AnyObject {
  func get(instrumentationScopeName: Swift.String) -> any IMQACore.Logger
  func loggerBuilder(instrumentationScopeName: Swift.String) -> any IMQACore.LoggerBuilder
}
public class LoggerProviderBuilder {
  public var clock: any IMQACore.Clock {
    get
  }
  public var resource: IMQACore.Resource {
    get
  }
  public var logLimits: IMQACore.LogLimits {
    get
  }
  public var logProcessors: [any IMQACore.LogRecordProcessor] {
    get
  }
  public init()
  public func with(clock: any IMQACore.Clock) -> Self
  public func with(resource: IMQACore.Resource) -> Self
  public func with(logLimits: IMQACore.LogLimits) -> Self
  public func with(processors: [any IMQACore.LogRecordProcessor]) -> Self
  public func build() -> IMQACore.LoggerProviderSdk
  @objc deinit
}
public class LoggerProviderSdk : IMQACore.LoggerProvider {
  public init(clock: any IMQACore.Clock = MillisClock(), resource: IMQACore.Resource = EnvVarResource.get(), logLimits: IMQACore.LogLimits = LogLimits(), logRecordProcessors: [any IMQACore.LogRecordProcessor] = [])
  public func get(instrumentationScopeName: Swift.String) -> any IMQACore.Logger
  public func loggerBuilder(instrumentationScopeName: Swift.String) -> any IMQACore.LoggerBuilder
  @objc deinit
}
public class MillisClock : IMQACore.Clock {
  public init()
  public var now: Foundation.Date {
    get
  }
  @objc deinit
}
public class MonotonicClock : IMQACore.Clock {
  public init(clock: any IMQACore.Clock)
  public var now: Foundation.Date {
    get
  }
  @objc deinit
}
public class MultiLogRecordProcessor : IMQACore.LogRecordProcessor {
  public func forceFlush(explicitTimeout: Foundation.TimeInterval? = nil) -> IMQACore.ExportResult
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil) -> IMQACore.ExportResult
  public init(logRecordProcessors: [any IMQACore.LogRecordProcessor])
  public func onEmit(logRecord: IMQACore.ReadableLogRecord)
  @objc deinit
}
public struct MultiSpanProcessor : IMQACore.SpanProcessor {
  public init(spanProcessors: [any IMQACore.SpanProcessor])
  public var isStartRequired: Swift.Bool {
    get
  }
  public var isEndRequired: Swift.Bool {
    get
  }
  public func onStart(parentContext: IMQACore.SpanContext?, span: any IMQACore.ReadableSpan)
  public func onEnd(span: any IMQACore.ReadableSpan)
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil)
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
}
@_hasMissingDesignatedInitializers public class NoopLogRecordProcessor : IMQACore.LogRecordProcessor {
  public static let noopLogRecordProcessor: IMQACore.NoopLogRecordProcessor
  public func onEmit(logRecord: IMQACore.ReadableLogRecord)
  public func forceFlush(explicitTimeout: Foundation.TimeInterval? = nil) -> IMQACore.ExportResult
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil) -> IMQACore.ExportResult
  @objc deinit
}
public enum OpenTelemetryContextKeys : Swift.String {
  case span
  case baggage
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct OpenTelemetryContextProvider {
  public var activeSpan: (any IMQACore.Span)? {
    get
  }
  public func setActiveSpan(_ span: any IMQACore.Span)
  public func removeContextForSpan(_ span: any IMQACore.Span)
  public func withActiveSpan<T>(_ span: any IMQACore.SpanBase, _ operation: () throws -> T) rethrows -> T
}
public struct RandomIdGenerator : IMQACore.IdGenerator {
  public init()
  public func generateSpanId() -> IMQACore.SpanId
  public func generateTraceId() -> IMQACore.TraceId
}
public struct ReadableLogRecord : Swift.Codable {
  public init(resource: IMQACore.Resource, instrumentationScopeInfo: IMQACore.InstrumentationScopeInfo, timestamp: Foundation.Date, observedTimestamp: Foundation.Date? = nil, spanContext: IMQACore.SpanContext? = nil, severity: IMQACore.Severity? = nil, body: IMQACore.AttributeValue? = nil, attributes: [Swift.String : IMQACore.AttributeValue])
  public var resource: IMQACore.Resource {
    get
  }
  public var instrumentationScopeInfo: IMQACore.InstrumentationScopeInfo {
    get
  }
  public var timestamp: Foundation.Date {
    get
  }
  public var observedTimestamp: Foundation.Date? {
    get
  }
  public var spanContext: IMQACore.SpanContext? {
    get
  }
  public var severity: IMQACore.Severity? {
    get
  }
  public var body: IMQACore.AttributeValue? {
    get
  }
  public var attributes: [Swift.String : IMQACore.AttributeValue] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ReadableSpan : IMQACore.Span {
  var name: Swift.String { get set }
  var instrumentationScopeInfo: IMQACore.InstrumentationScopeInfo { get }
  func toSpanData() -> IMQACore.SpanData
  var hasEnded: Swift.Bool { get }
  var latency: Foundation.TimeInterval { get }
}
@_hasMissingDesignatedInitializers public class RecordEventsReadableSpan : IMQACore.ReadableSpan {
  public var isRecording: Swift.Bool
  public var name: Swift.String {
    get
    set
  }
  public var spanLimits: IMQACore.SpanLimits {
    get
  }
  public var context: IMQACore.SpanContext {
    get
  }
  public var parentContext: IMQACore.SpanContext? {
    get
  }
  public var hasRemoteParent: Swift.Bool {
    get
  }
  public var spanProcessor: any IMQACore.SpanProcessor {
    get
  }
  public var links: [IMQACore.SpanData.Link] {
    get
  }
  public var totalRecordedLinks: Swift.Int {
    get
  }
  public var maxNumberOfAttributes: Swift.Int {
    get
  }
  public var maxValueLengthPerSpanAttribute: Swift.Int {
    get
  }
  public var maxNumberOfAttributesPerEvent: Swift.Int {
    get
  }
  public var kind: IMQACore.SpanKind {
    get
  }
  public var clock: any IMQACore.Clock {
    get
  }
  public var resource: IMQACore.Resource {
    get
  }
  public var instrumentationScopeInfo: IMQACore.InstrumentationScopeInfo {
    get
  }
  public var startTime: Foundation.Date {
    get
  }
  public var events: IMQACore.ArrayWithCapacity<IMQACore.SpanData.Event> {
    get
  }
  public var totalAttributeCount: Swift.Int {
    get
  }
  public var totalRecordedEvents: Swift.Int {
    get
  }
  public var status: IMQACore.Status {
    get
    set
  }
  public var latency: Foundation.TimeInterval {
    get
  }
  public var endTime: Foundation.Date? {
    get
  }
  public var hasEnded: Swift.Bool {
    get
  }
  public static func startSpan(context: IMQACore.SpanContext, name: Swift.String, instrumentationScopeInfo: IMQACore.InstrumentationScopeInfo, kind: IMQACore.SpanKind, parentContext: IMQACore.SpanContext?, hasRemoteParent: Swift.Bool, spanLimits: IMQACore.SpanLimits, spanProcessor: any IMQACore.SpanProcessor, clock: any IMQACore.Clock, resource: IMQACore.Resource, attributes: IMQACore.AttributesDictionary, links: [IMQACore.SpanData.Link], totalRecordedLinks: Swift.Int, startTime: Foundation.Date?) -> IMQACore.RecordEventsReadableSpan
  public func toSpanData() -> IMQACore.SpanData
  public func setAttribute(key: Swift.String, value: IMQACore.AttributeValue?)
  public func addEvent(name: Swift.String)
  public func addEvent(name: Swift.String, timestamp: Foundation.Date)
  public func addEvent(name: Swift.String, attributes: [Swift.String : IMQACore.AttributeValue])
  public func addEvent(name: Swift.String, attributes: [Swift.String : IMQACore.AttributeValue], timestamp: Foundation.Date)
  public func end()
  public func end(time: Foundation.Date)
  public var description: Swift.String {
    get
  }
  public func recordException(_ exception: any IMQACore.SpanException)
  public func recordException(_ exception: any IMQACore.SpanException, timestamp: Foundation.Date)
  public func recordException(_ exception: any IMQACore.SpanException, attributes: [Swift.String : IMQACore.AttributeValue])
  public func recordException(_ exception: any IMQACore.SpanException, attributes: [Swift.String : IMQACore.AttributeValue], timestamp: Foundation.Date)
  @objc deinit
}
public struct Resource : Swift.Equatable, Swift.Hashable, Swift.Codable {
  public var attributes: [Swift.String : IMQACore.AttributeValue]
  public init()
  public init(attributes: [Swift.String : IMQACore.AttributeValue])
  public mutating func merge(other: IMQACore.Resource)
  public func merging(other: IMQACore.Resource) -> IMQACore.Resource
  public static func == (a: IMQACore.Resource, b: IMQACore.Resource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum ResourceAttributes : Swift.String {
  case browserBrands
  case browserPlatform
  case browserMobile
  case browserLanguage
  case userAgentOriginal
  case cloudProvider
  case cloudAccountId
  case cloudRegion
  case cloudResourceId
  case cloudAvailabilityZone
  case cloudPlatform
  case awsEcsContainerArn
  case awsEcsClusterArn
  case awsEcsLaunchtype
  case awsEcsTaskArn
  case awsEcsTaskFamily
  case awsEcsTaskRevision
  case awsEksClusterArn
  case awsLogGroupNames
  case awsLogGroupArns
  case awsLogStreamNames
  case awsLogStreamArns
  case gcpCloudRunJobExecution
  case gcpCloudRunJobTaskIndex
  case gcpGceInstanceName
  case gcpGceInstanceHostname
  case herokuReleaseCreationTimestamp
  case herokuReleaseCommit
  case herokuAppId
  case containerName
  case containerId
  case containerRuntime
  case containerImageName
  case containerImageTag
  case containerImageId
  case containerCommand
  case containerCommandLine
  case containerCommandArgs
  case deploymentEnvironment
  case deviceId
  case deviceModelIdentifier
  case deviceModelName
  case deviceManufacturer
  case faasName
  case faasVersion
  case faasInstance
  case faasMaxMemory
  case hostId
  case hostName
  case hostType
  case hostArch
  case hostImageName
  case hostImageId
  case hostImageVersion
  case k8sClusterName
  case k8sClusterUid
  case k8sNodeName
  case k8sNodeUid
  case k8sNamespaceName
  case k8sPodUid
  case k8sPodName
  case k8sContainerName
  case k8sContainerRestartCount
  case k8sReplicasetUid
  case k8sReplicasetName
  case k8sDeploymentUid
  case k8sDeploymentName
  case k8sStatefulsetUid
  case k8sStatefulsetName
  case k8sDaemonsetUid
  case k8sDaemonsetName
  case k8sJobUid
  case k8sJobName
  case k8sCronjobUid
  case k8sCronjobName
  case osType
  case osDescription
  case osName
  case osVersion
  case processPid
  case processParentPid
  case processExecutableName
  case processExecutablePath
  case processCommand
  case processCommandLine
  case processCommandArgs
  case processOwner
  case processRuntimeName
  case processRuntimeVersion
  case processRuntimeDescription
  case serviceName
  case serviceVersion
  case serviceNamespace
  case serviceInstanceId
  case telemetrySdkName
  case telemetrySdkLanguage
  case telemetrySdkVersion
  case telemetryAutoVersion
  case webengineName
  case webengineVersion
  case webengineDescription
  case otelScopeName
  case otelScopeVersion
  case otelLibraryName
  case otelLibraryVersion
  public struct CloudProviderValues : Swift.CustomStringConvertible {
    public static let alibabaCloud: IMQACore.ResourceAttributes.CloudProviderValues
    public static let aws: IMQACore.ResourceAttributes.CloudProviderValues
    public static let azure: IMQACore.ResourceAttributes.CloudProviderValues
    public static let gcp: IMQACore.ResourceAttributes.CloudProviderValues
    public static let heroku: IMQACore.ResourceAttributes.CloudProviderValues
    public static let ibmCloud: IMQACore.ResourceAttributes.CloudProviderValues
    public static let tencentCloud: IMQACore.ResourceAttributes.CloudProviderValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct CloudPlatformValues : Swift.CustomStringConvertible {
    public static let alibabaCloudEcs: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let alibabaCloudFc: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let alibabaCloudOpenshift: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let awsEc2: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let awsEcs: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let awsEks: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let awsLambda: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let awsElasticBeanstalk: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let awsAppRunner: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let awsOpenshift: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let azureVm: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let azureContainerInstances: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let azureAks: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let azureFunctions: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let azureAppService: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let azureOpenshift: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let gcpBareMetalSolution: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let gcpComputeEngine: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let gcpCloudRun: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let gcpKubernetesEngine: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let gcpCloudFunctions: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let gcpAppEngine: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let gcpOpenshift: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let ibmCloudOpenshift: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let tencentCloudCvm: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let tencentCloudEks: IMQACore.ResourceAttributes.CloudPlatformValues
    public static let tencentCloudScf: IMQACore.ResourceAttributes.CloudPlatformValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public enum AwsEcsLaunchtypeValues : Swift.String {
    case ec2
    case fargate
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct HostArchValues : Swift.CustomStringConvertible {
    public static let amd64: IMQACore.ResourceAttributes.HostArchValues
    public static let arm32: IMQACore.ResourceAttributes.HostArchValues
    public static let arm64: IMQACore.ResourceAttributes.HostArchValues
    public static let ia64: IMQACore.ResourceAttributes.HostArchValues
    public static let ppc32: IMQACore.ResourceAttributes.HostArchValues
    public static let ppc64: IMQACore.ResourceAttributes.HostArchValues
    public static let s390x: IMQACore.ResourceAttributes.HostArchValues
    public static let x86: IMQACore.ResourceAttributes.HostArchValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct OsTypeValues : Swift.CustomStringConvertible {
    public static let windows: IMQACore.ResourceAttributes.OsTypeValues
    public static let linux: IMQACore.ResourceAttributes.OsTypeValues
    public static let darwin: IMQACore.ResourceAttributes.OsTypeValues
    public static let freebsd: IMQACore.ResourceAttributes.OsTypeValues
    public static let netbsd: IMQACore.ResourceAttributes.OsTypeValues
    public static let openbsd: IMQACore.ResourceAttributes.OsTypeValues
    public static let dragonflybsd: IMQACore.ResourceAttributes.OsTypeValues
    public static let hpux: IMQACore.ResourceAttributes.OsTypeValues
    public static let aix: IMQACore.ResourceAttributes.OsTypeValues
    public static let solaris: IMQACore.ResourceAttributes.OsTypeValues
    public static let zOs: IMQACore.ResourceAttributes.OsTypeValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct TelemetrySdkLanguageValues : Swift.CustomStringConvertible {
    public static let cpp: IMQACore.ResourceAttributes.TelemetrySdkLanguageValues
    public static let dotnet: IMQACore.ResourceAttributes.TelemetrySdkLanguageValues
    public static let erlang: IMQACore.ResourceAttributes.TelemetrySdkLanguageValues
    public static let go: IMQACore.ResourceAttributes.TelemetrySdkLanguageValues
    public static let java: IMQACore.ResourceAttributes.TelemetrySdkLanguageValues
    public static let nodejs: IMQACore.ResourceAttributes.TelemetrySdkLanguageValues
    public static let php: IMQACore.ResourceAttributes.TelemetrySdkLanguageValues
    public static let python: IMQACore.ResourceAttributes.TelemetrySdkLanguageValues
    public static let ruby: IMQACore.ResourceAttributes.TelemetrySdkLanguageValues
    public static let rust: IMQACore.ResourceAttributes.TelemetrySdkLanguageValues
    public static let swift: IMQACore.ResourceAttributes.TelemetrySdkLanguageValues
    public static let webjs: IMQACore.ResourceAttributes.TelemetrySdkLanguageValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public func == (left: IMQACore.ResourceAttributes, right: Swift.String) -> Swift.Bool
public func == (left: Swift.String, right: IMQACore.ResourceAttributes) -> Swift.Bool
@_hasMissingDesignatedInitializers public class ApplicationResourceProvider : IMQACore.ResourceProvider {
  public init(source: any IMQACore.IApplicationDataSource)
  override public var attributes: [Swift.String : IMQACore.AttributeValue] {
    get
  }
  @objc deinit
}
public class ApplicationDataSource : IMQACore.IApplicationDataSource {
  public init()
  public var name: Swift.String? {
    get
  }
  public var identifier: Swift.String? {
    get
  }
  public var version: Swift.String? {
    get
  }
  public var build: Swift.String? {
    get
  }
  @objc deinit
}
public class DeviceDataSource : IMQACore.IDeviceDataSource {
  public init()
  public var model: Swift.String? {
    get
  }
  public var identifier: Swift.String? {
    get
  }
  @objc deinit
}
public protocol IApplicationDataSource {
  var name: Swift.String? { get }
  var identifier: Swift.String? { get }
  var version: Swift.String? { get }
  var build: Swift.String? { get }
}
public protocol IDeviceDataSource {
  var identifier: Swift.String? { get }
  var model: Swift.String? { get }
}
public protocol IOperatingSystemDataSource {
  var type: Swift.String { get }
  var description: Swift.String { get }
  var name: Swift.String { get }
  var version: Swift.String { get }
}
public protocol ITelemetryDataSource {
  var version: Swift.String? { get }
  var name: Swift.String { get }
  var language: Swift.String { get }
}
public class OperatingSystemDataSource : IMQACore.IOperatingSystemDataSource {
  public init()
  public var description: Swift.String {
    get
  }
  public var type: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var version: Swift.String {
    get
  }
  @objc deinit
}
public class TelemetryDataSource : IMQACore.ITelemetryDataSource {
  public init()
  public var language: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var version: Swift.String? {
    get
  }
  @objc deinit
}
public class DefaultResources {
  public init()
  public func get() -> IMQACore.Resource
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DeviceResourceProvider : IMQACore.ResourceProvider {
  public init(source: any IMQACore.IDeviceDataSource)
  override public var attributes: [Swift.String : IMQACore.AttributeValue] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OSResourceProvider : IMQACore.ResourceProvider {
  public init(source: any IMQACore.IOperatingSystemDataSource)
  override public var attributes: [Swift.String : IMQACore.AttributeValue] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ResourceProvider {
  public var attributes: [Swift.String : IMQACore.AttributeValue] {
    get
  }
  public func create() -> IMQACore.Resource
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TelemetryResourceProvider : IMQACore.ResourceProvider {
  public init(source: any IMQACore.ITelemetryDataSource)
  override public var attributes: [Swift.String : IMQACore.AttributeValue] {
    get
  }
  @objc deinit
}
public protocol Sampler : AnyObject, Swift.CustomStringConvertible {
  func shouldSample(parentContext: IMQACore.SpanContext?, traceId: IMQACore.TraceId, name: Swift.String, kind: IMQACore.SpanKind, attributes: [Swift.String : IMQACore.AttributeValue], parentLinks: [IMQACore.SpanData.Link]) -> any IMQACore.Decision
}
public protocol Decision {
  var isSampled: Swift.Bool { get }
  var attributes: [Swift.String : IMQACore.AttributeValue] { get }
}
public enum Samplers {
  public static var alwaysOn: any IMQACore.Sampler
  public static var alwaysOff: any IMQACore.Sampler
  public static func traceIdRatio(ratio: Swift.Double) -> any IMQACore.Sampler
  public static func parentBased(root: any IMQACore.Sampler, remoteParentSampled: (any IMQACore.Sampler)? = nil, remoteParentNotSampled: (any IMQACore.Sampler)? = nil, localParentSampled: (any IMQACore.Sampler)? = nil, localParentNotSampled: (any IMQACore.Sampler)? = nil) -> any IMQACore.Sampler
}
public struct BatchSpanProcessor : IMQACore.SpanProcessor {
  public static var name: Swift.String {
    get
  }
  public init(spanExporter: any IMQACore.SpanExporter, scheduleDelay: Foundation.TimeInterval = 5, exportTimeout: Foundation.TimeInterval = 30, maxQueueSize: Swift.Int = 2048, maxExportBatchSize: Swift.Int = 512, willExportCallback: ((inout [IMQACore.SpanData]) -> Swift.Void)? = nil)
  public let isStartRequired: Swift.Bool
  public let isEndRequired: Swift.Bool
  public func onStart(parentContext: IMQACore.SpanContext?, span: any IMQACore.ReadableSpan)
  public func onEnd(span: any IMQACore.ReadableSpan)
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil)
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
}
public protocol IMQALogSharedState {
  var processors: [any IMQACore.LogRecordProcessor] { get }
}
@_hasMissingDesignatedInitializers public class SessionSamplerRecord : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SessionSamplerStorage {
  public static let shared: IMQACore.SessionSamplerStorage
  public func save(record: IMQACore.SessionSamplerRecord)
  public func load(sessionId: Swift.String) -> IMQACore.SessionSamplerRecord?
  public func delete(sessionId: Swift.String)
  public func clearAll()
  @objc deinit
}
public struct OpenTelemetry {
  public static var version: Swift.String
  public static var instance: IMQACore.OpenTelemetry
  public var tracerProvider: any IMQACore.TracerProvider {
    get
  }
  public var loggerProvider: any IMQACore.LoggerProvider {
    get
  }
  public var contextProvider: IMQACore.OpenTelemetryContextProvider {
    get
  }
  public static func registerTracerProvider(tracerProvider: any IMQACore.TracerProvider)
  public static func registerLoggerProvider(loggerProvider: any IMQACore.LoggerProvider)
  public static func registerContextManager(contextManager: any IMQACore.ContextManager)
}
public class OtlpHttpTraceExporter : IMQACore.SpanExporter {
  public init(url: Foundation.URL)
  public func shutdown(explicitTimeout: Foundation.TimeInterval?)
  public func flush(explicitTimeout: Foundation.TimeInterval?) -> IMQACore.SpanExporterResultCode
  public func export(spans: [IMQACore.SpanData], explicitTimeout: Foundation.TimeInterval?) -> IMQACore.SpanExporterResultCode
  @objc deinit
}
public struct SimpleSpanProcessor : IMQACore.SpanProcessor {
  public let isStartRequired: Swift.Bool
  public let isEndRequired: Swift.Bool
  public func onStart(parentContext: IMQACore.SpanContext?, span: any IMQACore.ReadableSpan)
  public mutating func onEnd(span: any IMQACore.ReadableSpan)
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil)
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
  public init(spanExporter: any IMQACore.SpanExporter)
  public func reportingOnlySampled(sampled: Swift.Bool) -> IMQACore.SimpleSpanProcessor
}
extension IMQACore.Severity {
  public func toLogSeverity() -> IMQACore.LogSeverity?
  public static func fromLogSeverity(_ logSeverity: IMQACore.LogSeverity) -> IMQACore.Severity?
}
public enum Severity : Swift.Int, Swift.Comparable, Swift.CustomStringConvertible, Swift.Codable {
  case trace
  case trace2, trace3, trace4, debug, debug2, debug3, debug4, info, info2, info3, info4, warn, warn2, warn3, warn4, error, error2, error3, error4, fatal, fatal2, fatal3, fatal4
  public var description: Swift.String {
    get
  }
  public static func < (lhs: IMQACore.Severity, rhs: IMQACore.Severity) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol SpanBase : AnyObject, Swift.CustomStringConvertible {
  var kind: IMQACore.SpanKind { get }
  var context: IMQACore.SpanContext { get }
  var isRecording: Swift.Bool { get }
  var status: IMQACore.Status { get set }
  var name: Swift.String { get set }
  func setAttribute(key: Swift.String, value: IMQACore.AttributeValue?)
  func addEvent(name: Swift.String)
  func addEvent(name: Swift.String, timestamp: Foundation.Date)
  func addEvent(name: Swift.String, attributes: [Swift.String : IMQACore.AttributeValue])
  func addEvent(name: Swift.String, attributes: [Swift.String : IMQACore.AttributeValue], timestamp: Foundation.Date)
}
public protocol SpanExceptionRecorder {
  func recordException(_ exception: any IMQACore.SpanException)
  func recordException(_ exception: any IMQACore.SpanException, timestamp: Foundation.Date)
  func recordException(_ exception: any IMQACore.SpanException, attributes: [Swift.String : IMQACore.AttributeValue])
  func recordException(_ exception: any IMQACore.SpanException, attributes: [Swift.String : IMQACore.AttributeValue], timestamp: Foundation.Date)
}
public protocol Span : IMQACore.SpanBase, IMQACore.SpanExceptionRecorder {
  func end()
  func end(time: Foundation.Date)
}
extension IMQACore.SpanBase {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
}
extension IMQACore.SpanBase {
  public func setAttribute(key: Swift.String, value: Swift.String)
  public func setAttribute(key: Swift.String, value: Swift.Int)
  public func setAttribute(key: Swift.String, value: Swift.Double)
  public func setAttribute(key: Swift.String, value: Swift.Bool)
}
extension IMQACore.SpanExceptionRecorder {
  public func recordException(_ exception: any Swift.Error, attributes: [Swift.String : IMQACore.AttributeValue]? = nil, timestamp: Foundation.Date? = nil)
}
extension IMQACore.Span {
  public func putHttpHostAttribute(string hostName: Swift.String, int port: Swift.Int)
  public func putHttpStatusCode(statusCode: Swift.Int, reasonPhrase: Swift.String)
}
public protocol SpanBuilderBase : AnyObject {
  @discardableResult
  func setParent(_ parent: any IMQACore.Span) -> Self
  @discardableResult
  func setParent(_ parent: IMQACore.SpanContext) -> Self
  @discardableResult
  func setNoParent() -> Self
  @discardableResult
  func addLink(spanContext: IMQACore.SpanContext) -> Self
  @discardableResult
  func addLink(spanContext: IMQACore.SpanContext, attributes: [Swift.String : IMQACore.AttributeValue]) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Swift.String) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Swift.Int) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Swift.Double) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Swift.Bool) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: IMQACore.AttributeValue) -> Self
  @discardableResult
  func setSpanKind(spanKind: IMQACore.SpanKind) -> Self
  @discardableResult
  func setStartTime(time: Foundation.Date) -> Self
  func withActiveSpan<T>(_ operation: (any IMQACore.SpanBase) throws -> T) rethrows -> T
  func startSpan() -> any IMQACore.Span
  func withStartedSpan<T>(_ operation: (any IMQACore.SpanBase) throws -> T) rethrows -> T
}
public protocol SpanBuilder : IMQACore.SpanBuilderBase {
  @discardableResult
  func setActive(_ active: Swift.Bool) -> Self
}
extension IMQACore.SpanBuilderBase {
  public func withStartedSpan<T>(_ operation: (any IMQACore.SpanBase) throws -> T) rethrows -> T
  @discardableResult
  public func setAttribute(key: Swift.String, value: Swift.String) -> Self
  @discardableResult
  public func setAttribute(key: Swift.String, value: Swift.Int) -> Self
  @discardableResult
  public func setAttribute(key: Swift.String, value: Swift.Double) -> Self
  @discardableResult
  public func setAttribute(key: Swift.String, value: Swift.Bool) -> Self
}
public struct SpanContext : Swift.Equatable, Swift.CustomStringConvertible, Swift.Hashable, Swift.Codable {
  public var traceId: IMQACore.TraceId {
    get
  }
  public var spanId: IMQACore.SpanId {
    get
  }
  public var traceFlags: IMQACore.TraceFlags {
    get
  }
  public var traceState: IMQACore.TraceState
  public let isRemote: Swift.Bool
  public static func create(traceId: IMQACore.TraceId, spanId: IMQACore.SpanId, traceFlags: IMQACore.TraceFlags, traceState: IMQACore.TraceState) -> IMQACore.SpanContext
  public static func createFromRemoteParent(traceId: IMQACore.TraceId, spanId: IMQACore.SpanId, traceFlags: IMQACore.TraceFlags, traceState: IMQACore.TraceState) -> IMQACore.SpanContext
  public var isValid: Swift.Bool {
    get
  }
  public var isSampled: Swift.Bool {
    get
  }
  public static func == (lhs: IMQACore.SpanContext, rhs: IMQACore.SpanContext) -> Swift.Bool
  public var description: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SpanData : Swift.Equatable, Swift.Codable {
  public var traceId: IMQACore.TraceId {
    get
  }
  public var spanId: IMQACore.SpanId {
    get
  }
  public var traceFlags: IMQACore.TraceFlags {
    get
  }
  public var traceState: IMQACore.TraceState {
    get
  }
  public var parentSpanId: IMQACore.SpanId? {
    get
  }
  public var resource: IMQACore.Resource {
    get
  }
  public var instrumentationScope: IMQACore.InstrumentationScopeInfo {
    get
  }
  public var name: Swift.String {
    get
  }
  public var kind: IMQACore.SpanKind {
    get
  }
  public var startTime: Foundation.Date {
    get
  }
  public var attributes: [Swift.String : IMQACore.AttributeValue] {
    get
  }
  public var events: [IMQACore.SpanData.Event] {
    get
  }
  public var links: [IMQACore.SpanData.Link] {
    get
  }
  public var status: IMQACore.Status {
    get
  }
  public var endTime: Foundation.Date {
    get
  }
  public var hasRemoteParent: Swift.Bool {
    get
  }
  public var hasEnded: Swift.Bool {
    get
  }
  public var totalRecordedEvents: Swift.Int {
    get
  }
  public var totalRecordedLinks: Swift.Int {
    get
  }
  public var totalAttributeCount: Swift.Int {
    get
  }
  public static func == (lhs: IMQACore.SpanData, rhs: IMQACore.SpanData) -> Swift.Bool
  @discardableResult
  public mutating func settingName(_ name: Swift.String) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingTraceId(_ traceId: IMQACore.TraceId) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingSpanId(_ spanId: IMQACore.SpanId) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingTraceFlags(_ traceFlags: IMQACore.TraceFlags) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingTraceState(_ traceState: IMQACore.TraceState) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingAttributes(_ attributes: [Swift.String : IMQACore.AttributeValue]) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingStartTime(_ time: Foundation.Date) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingEndTime(_ time: Foundation.Date) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingKind(_ kind: IMQACore.SpanKind) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingLinks(_ links: [IMQACore.SpanData.Link]) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingParentSpanId(_ parentSpanId: IMQACore.SpanId) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingResource(_ resource: IMQACore.Resource) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingStatus(_ status: IMQACore.Status) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingEvents(_ events: [IMQACore.SpanData.Event]) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingHasRemoteParent(_ hasRemoteParent: Swift.Bool) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingHasEnded(_ hasEnded: Swift.Bool) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingTotalRecordedEvents(_ totalRecordedEvents: Swift.Int) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingTotalRecordedLinks(_ totalRecordedLinks: Swift.Int) -> IMQACore.SpanData
  @discardableResult
  public mutating func settingTotalAttributeCount(_ totalAttributeCount: Swift.Int) -> IMQACore.SpanData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension IMQACore.SpanData {
  public struct Event : Swift.Equatable, Swift.Codable {
    public var timestamp: Foundation.Date {
      get
    }
    public var name: Swift.String {
      get
    }
    public var attributes: [Swift.String : IMQACore.AttributeValue] {
      get
    }
    public init(name: Swift.String, timestamp: Foundation.Date, attributes: [Swift.String : IMQACore.AttributeValue]? = nil)
    public init(timestamp: Foundation.Date, event: IMQACore.SpanData.Event)
    public static func == (a: IMQACore.SpanData.Event, b: IMQACore.SpanData.Event) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension IMQACore.SpanData {
  public struct Link : Swift.Codable {
    public let context: IMQACore.SpanContext
    public let attributes: [Swift.String : IMQACore.AttributeValue]
    public init(context: IMQACore.SpanContext, attributes: [Swift.String : IMQACore.AttributeValue] = [String: AttributeValue]())
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public func == (lhs: IMQACore.SpanData.Link, rhs: IMQACore.SpanData.Link) -> Swift.Bool
public func == (lhs: [IMQACore.SpanData.Link], rhs: [IMQACore.SpanData.Link]) -> Swift.Bool
public protocol SpanException {
  var type: Swift.String { get }
  var message: Swift.String? { get }
  var stackTrace: [Swift.String]? { get }
}
extension Foundation.NSError : IMQACore.SpanException {
  public var type: Swift.String {
    get
  }
  public var message: Swift.String? {
    get
  }
  public var stackTrace: [Swift.String]? {
    get
  }
}
extension Foundation.NSException : IMQACore.SpanException {
  public var type: Swift.String {
    get
  }
  public var message: Swift.String? {
    get
  }
  public var stackTrace: [Swift.String]? {
    get
  }
}
public protocol SpanExporter : AnyObject {
  @discardableResult
  func export(spans: [IMQACore.SpanData], explicitTimeout: Foundation.TimeInterval?) -> IMQACore.SpanExporterResultCode
  func flush(explicitTimeout: Foundation.TimeInterval?) -> IMQACore.SpanExporterResultCode
  func shutdown(explicitTimeout: Foundation.TimeInterval?)
}
extension IMQACore.SpanExporter {
  public func export(spans: [IMQACore.SpanData]) -> IMQACore.SpanExporterResultCode
  public func flush() -> IMQACore.SpanExporterResultCode
  public func shutdown()
}
public enum SpanExporterResultCode {
  case success
  case failure
  public static func == (a: IMQACore.SpanExporterResultCode, b: IMQACore.SpanExporterResultCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SpanId : Swift.Equatable, Swift.Comparable, Swift.Hashable, Swift.CustomStringConvertible, Swift.Codable {
  public static let size: Swift.Int
  public static let invalidId: Swift.UInt64
  public static let invalid: IMQACore.SpanId
  public static func getSize() -> Swift.Int
  public init(id: Swift.UInt64)
  public init()
  public static func random() -> IMQACore.SpanId
  public init(fromBytes bytes: [Swift.UInt8], withOffset offset: Swift.Int = 0)
  public init(fromBytes bytes: Swift.ArraySlice<Swift.UInt8>, withOffset offset: Swift.Int = 0)
  public init(fromBytes bytes: Swift.ArraySlice<Swift.Character>, withOffset offset: Swift.Int = 0)
  public func copyBytesTo(dest: inout Foundation.Data, destOffset: Swift.Int)
  public func copyBytesTo(dest: inout [Swift.UInt8], destOffset: Swift.Int)
  public func copyBytesTo(dest: inout Swift.ArraySlice<Swift.UInt8>, destOffset: Swift.Int)
  public init(fromHexString hex: Swift.String, withOffset offset: Swift.Int = 0)
  public var hexString: Swift.String {
    get
  }
  public var rawValue: Swift.UInt64 {
    get
  }
  public var isValid: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
  public static func < (lhs: IMQACore.SpanId, rhs: IMQACore.SpanId) -> Swift.Bool
  public static func == (lhs: IMQACore.SpanId, rhs: IMQACore.SpanId) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum SpanKind : Swift.String, Swift.Equatable, Swift.Codable {
  case `internal`
  case server
  case client
  case producer
  case consumer
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SpanLimits : Swift.Equatable {
  public var attributeCountLimit: Swift.Int {
    get
  }
  public var eventCountLimit: Swift.Int {
    get
  }
  public var linkCountLimit: Swift.Int {
    get
  }
  public var attributePerEventCountLimit: Swift.Int {
    get
  }
  public var attributePerLinkCountLimit: Swift.Int {
    get
  }
  public var attributeValueLengthLimit: Swift.Int {
    get
  }
  public init()
  @discardableResult
  public func settingAttributeCountLimit(_ number: Swift.UInt) -> IMQACore.SpanLimits
  @discardableResult
  public func settingAttributeValueLengthLimit(_ number: Swift.UInt) -> IMQACore.SpanLimits
  @discardableResult
  public func settingEventCountLimit(_ number: Swift.UInt) -> IMQACore.SpanLimits
  @discardableResult
  public func settingLinkCountLimit(_ number: Swift.UInt) -> IMQACore.SpanLimits
  @discardableResult
  public func settingAttributePerEventCountLimit(_ number: Swift.UInt) -> IMQACore.SpanLimits
  @discardableResult
  public func settingAttributePerLinkCountLimit(_ number: Swift.UInt) -> IMQACore.SpanLimits
  public static func == (lhs: IMQACore.SpanLimits, rhs: IMQACore.SpanLimits) -> Swift.Bool
}
public protocol SpanProcessor {
  var isStartRequired: Swift.Bool { get }
  var isEndRequired: Swift.Bool { get }
  func onStart(parentContext: IMQACore.SpanContext?, span: any IMQACore.ReadableSpan)
  mutating func onEnd(span: any IMQACore.ReadableSpan)
  mutating func shutdown(explicitTimeout: Foundation.TimeInterval?)
  func forceFlush(timeout: Foundation.TimeInterval?)
}
public enum Status : Swift.Equatable {
  case ok
  case unset
  case error(description: Swift.String)
  public var isOk: Swift.Bool {
    get
  }
  public var isError: Swift.Bool {
    get
  }
  public var name: Swift.String {
    get
  }
  public var code: Swift.Int {
    get
  }
  public static func == (a: IMQACore.Status, b: IMQACore.Status) -> Swift.Bool
}
extension IMQACore.Status : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension IMQACore.Status : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StringUtils {
  public static func isPrintableString(_ string: Swift.String) -> Swift.Bool
  public static func isValidMetricName(_ metricName: Swift.String) -> Swift.Bool
}
extension Swift.Double {
  public var toMilliseconds: Swift.UInt64 {
    get
  }
  public var toMicroseconds: Swift.UInt64 {
    get
  }
  public var toNanoseconds: Swift.UInt64 {
    get
  }
  public static func fromMilliseconds(_ millis: Swift.Int64) -> Foundation.TimeInterval
  public static func fromMicroseconds(_ micros: Swift.Int64) -> Foundation.TimeInterval
  public static func fromNanoseconds(_ nanos: Swift.Int64) -> Foundation.TimeInterval
}
public protocol TextMapBaggagePropagator {
  var fields: Swift.Set<Swift.String> { get }
}
public protocol TextMapPropagator {
  var fields: Swift.Set<Swift.String> { get }
  func inject<S>(spanContext: IMQACore.SpanContext, carrier: inout [Swift.String : Swift.String], setter: S) where S : IMQACore.Setter
  @discardableResult
  func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> IMQACore.SpanContext? where G : IMQACore.Getter
}
public protocol Setter {
  func set(carrier: inout [Swift.String : Swift.String], key: Swift.String, value: Swift.String)
}
public protocol Getter {
  func get(carrier: [Swift.String : Swift.String], key: Swift.String) -> [Swift.String]?
}
public struct TraceFlags : Swift.Equatable, Swift.CustomStringConvertible, Swift.Codable {
  public var byte: Swift.UInt8 {
    get
  }
  public var hexString: Swift.String {
    get
  }
  public init()
  public init(fromByte src: Swift.UInt8)
  public init(fromHexString hex: Swift.String, withOffset offset: Swift.Int = 0)
  public var sampled: Swift.Bool {
    get
  }
  public mutating func setIsSampled(_ isSampled: Swift.Bool)
  public func settingIsSampled(_ isSampled: Swift.Bool) -> IMQACore.TraceFlags
  public var description: Swift.String {
    get
  }
  public static func == (a: IMQACore.TraceFlags, b: IMQACore.TraceFlags) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TraceId : Swift.Comparable, Swift.Hashable, Swift.CustomStringConvertible, Swift.Equatable, Swift.Codable {
  public static let size: Swift.Int
  public static let invalidId: Swift.UInt64
  public static let invalid: IMQACore.TraceId
  public var idHi: Swift.UInt64 {
    get
  }
  public var idLo: Swift.UInt64 {
    get
  }
  public init(idHi: Swift.UInt64, idLo: Swift.UInt64)
  public init()
  public static func random() -> IMQACore.TraceId
  public init(fromData data: Foundation.Data)
  public init(fromBytes bytes: [Swift.UInt8])
  public init(fromBytes bytes: Swift.ArraySlice<Swift.UInt8>)
  public init(fromBytes bytes: Swift.ArraySlice<Swift.Character>)
  public func copyBytesTo(dest: inout Foundation.Data, destOffset: Swift.Int)
  public func copyBytesTo(dest: inout [Swift.UInt8], destOffset: Swift.Int)
  public func copyBytesTo(dest: inout Swift.ArraySlice<Swift.UInt8>, destOffset: Swift.Int)
  public init(fromHexString hex: Swift.String, withOffset offset: Swift.Int = 0)
  public var isValid: Swift.Bool {
    get
  }
  public var hexString: Swift.String {
    get
  }
  public var rawHigherLong: Swift.UInt64 {
    get
  }
  public var rawLowerLong: Swift.UInt64 {
    get
  }
  public var description: Swift.String {
    get
  }
  public static func < (lhs: IMQACore.TraceId, rhs: IMQACore.TraceId) -> Swift.Bool
  public static func == (lhs: IMQACore.TraceId, rhs: IMQACore.TraceId) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TraceState : Swift.Equatable, Swift.Codable {
  public var entries: [IMQACore.TraceState.Entry] {
    get
  }
  public init()
  public init?(entries: [IMQACore.TraceState.Entry])
  public func get(key: Swift.String) -> Swift.String?
  public func setting(key: Swift.String, value: Swift.String) -> IMQACore.TraceState
  public func removing(key: Swift.String) -> IMQACore.TraceState
  public struct Entry : Swift.Equatable, Swift.Codable {
    public var key: Swift.String {
      get
    }
    public var value: Swift.String {
      get
    }
    public init?(key: Swift.String, value: Swift.String)
    public static func == (a: IMQACore.TraceState.Entry, b: IMQACore.TraceState.Entry) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public static func == (a: IMQACore.TraceState, b: IMQACore.TraceState) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol Tracer : AnyObject {
  func spanBuilder(spanName: Swift.String) -> any IMQACore.SpanBuilder
}
public protocol TracerProvider {
  func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String?) -> any IMQACore.Tracer
}
public class TracerProviderBuilder {
  public var clock: any IMQACore.Clock {
    get
  }
  public var idGenerator: any IMQACore.IdGenerator {
    get
  }
  public var resource: IMQACore.Resource {
    get
  }
  public var spanLimits: IMQACore.SpanLimits {
    get
  }
  public var sampler: any IMQACore.Sampler {
    get
  }
  public var spanProcessors: [any IMQACore.SpanProcessor] {
    get
  }
  public init()
  public func with(clock: any IMQACore.Clock) -> Self
  public func with(idGenerator: any IMQACore.IdGenerator) -> Self
  public func with(resource: IMQACore.Resource) -> Self
  public func with(spanLimits: IMQACore.SpanLimits) -> Self
  public func with(sampler: any IMQACore.Sampler) -> Self
  public func add(spanProcessor: any IMQACore.SpanProcessor) -> Self
  public func add(spanProcessors: [any IMQACore.SpanProcessor]) -> Self
  public func build() -> IMQACore.TracerProviderSdk
  @objc deinit
}
public class TracerProviderSdk : IMQACore.TracerProvider {
  public init(clock: any IMQACore.Clock = MillisClock(), idGenerator: any IMQACore.IdGenerator = RandomIdGenerator(), resource: IMQACore.Resource = EnvVarResource.get(), spanLimits: IMQACore.SpanLimits = SpanLimits(), sampler: any IMQACore.Sampler = Samplers.parentBased(root: Samplers.alwaysOn), spanProcessors: [any IMQACore.SpanProcessor] = [])
  @objc deinit
  public func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String? = nil) -> any IMQACore.Tracer
  public func getActiveClock() -> any IMQACore.Clock
  public func updateActiveClock(_ newClock: any IMQACore.Clock)
  public func getActiveIdGenerator() -> any IMQACore.IdGenerator
  public func updateActiveIdGenerator(_ newGenerator: any IMQACore.IdGenerator)
  public func getActiveResource() -> IMQACore.Resource
  public func updateActiveResource(_ newResource: IMQACore.Resource)
  public func getActiveSpanLimits() -> IMQACore.SpanLimits
  public func updateActiveSpanLimits(_ spanLimits: IMQACore.SpanLimits)
  public func getActiveSampler() -> any IMQACore.Sampler
  public func updateActiveSampler(_ newSampler: any IMQACore.Sampler)
  public func getActiveSpanProcessors() -> [any IMQACore.SpanProcessor]
  public func addSpanProcessor(_ spanProcessor: any IMQACore.SpanProcessor)
  public func resetSpanProcessors()
  public func shutdown()
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
}
@_hasMissingDesignatedInitializers public class TracerSdk : IMQACore.Tracer {
  final public let instrumentationScopeInfo: IMQACore.InstrumentationScopeInfo
  public func spanBuilder(spanName: Swift.String) -> any IMQACore.SpanBuilder
  @objc deinit
}
extension IMQACore.Resource {
  public static let OTEL_SWIFT_SDK_VERSION: Swift.String
}
public struct W3CTraceContextPropagator : IMQACore.TextMapPropagator {
  public init()
  public let fields: Swift.Set<Swift.String>
  public func inject<S>(spanContext: IMQACore.SpanContext, carrier: inout [Swift.String : Swift.String], setter: S) where S : IMQACore.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> IMQACore.SpanContext? where G : IMQACore.Getter
}
extension IMQACore.IMQA {
  @objc(IMQAEndpoints) public class Endpoints : ObjectiveC.NSObject {
    @objc final public let baseURL: Swift.String
    @objc public init(collectorURL: Swift.String)
    public enum OpentelemetryBaseUrl {
      case tracer(Swift.String)
      case metric(Swift.String)
      case logs(Swift.String)
    }
    @objc deinit
  }
}
extension IMQACore.IMQA {
  @objc(IMQALogLevel) public enum LogLevel : Swift.Int {
    case none = 0
    case trace
    case debug
    case info
    case warning
    case error
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension IMQACore.IMQA {
  @objc(IMQAOptions) final public class Options : ObjectiveC.NSObject {
    final public let serviceKey: Swift.String
    final public let endpoints: IMQACore.IMQA.Endpoints?
    final public var sampleRate: Swift.Double
    @objc public init(serviceKey: Swift.String, endpoints: IMQACore.IMQA.Endpoints? = nil, sampleRate: Swift.Double = 1.0)
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class IMQAMeta {
  public static let sdkVersion: Swift.String
  public static let scopeName: Swift.String
  @objc deinit
}
public enum IMQASpanType : Swift.String, Swift.Decodable {
  case SESSION
  case RENDER
  case XHR
  case EVENT
  case CRASH
  case LOG
  case APPLIFECYCLE
  case DEFAULT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ResourceSemantics {
  public static let serviceName: Swift.String
  public static let serviceVersion: Swift.String
  public static let imqaSDKVersion: Swift.String
  public static let osName: Swift.String
  public static let osVersion: Swift.String
  public static let serviceKey: Swift.String
  public static let deviceId: Swift.String
  public static let deviceManufacturer: Swift.String
  public static let deviceBrand: Swift.String
  public static let deviceModelIdentifier: Swift.String
}
public struct SpanSemantics {
  public static let spanType: Swift.String
  public struct Event {
    public static let eventType: Swift.String
    public static let targetElement: Swift.String
    public static let targetElementText: Swift.String
    public static let tapCoords: Swift.String
  }
  public enum EventValue : Swift.String {
    case eventClick
    case eventScroll
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct XHR {
    public static let httpRequestHeaders: Swift.String
    public static let httpRequestBody: Swift.String
    public static let errorType: Swift.String
    public static let urlFull: Swift.String
    public static let httpUrl: Swift.String
    public static let httpHost: Swift.String
    public static let httpScheme: Swift.String
    public static let urlScheme: Swift.String
    public static let httpMethod: Swift.String
    public static let httpRequestMethod: Swift.String
    public static let httpResponseStatusCode: Swift.String
    public static let exceptionType: Swift.String
    public static let exceptionMessage: Swift.String
  }
  public struct Session {
    public static let name: Swift.String
    public static let keyId: Swift.String
    public static let keyState: Swift.String
    public static let keyColdStart: Swift.String
    public static let keyTerminated: Swift.String
    public static let keyCleanExit: Swift.String
    public static let keySessionNumber: Swift.String
    public static let keyHeartbeat: Swift.String
    public static let keyCrashId: Swift.String
  }
  public struct Common {
    public static let sessionId: Swift.String
    public static let traceId: Swift.String
    public static let spanId: Swift.String
    public static let sourceAddress: Swift.String
    public static let screenName: Swift.String
    public static let screenType: Swift.String
    public static let userId: Swift.String
    public static let networkCarrierName: Swift.String
    public static let networkConnectionSubtype: Swift.String
    public static let deviceBatteryLevel: Swift.String
    public static let deviceBatteryIsCharging: Swift.String
    public static let deviceCpuUsage: Swift.String
    public static let deviceMemoryTotal: Swift.String
    public static let deviceMemoryFree: Swift.String
    public static let appMemoryAllocated: Swift.String
    public static let areaCode: Swift.String
    public static let networkAvailable: Swift.String
    public static let networkCellular: Swift.String
    public static let networkWifi: Swift.String
  }
  public struct CommonValue {
    public static var noScreenValue: Swift.String
    public static var viewValue: Swift.String
  }
  public struct SessionValue {
    public static var name: Swift.String
  }
  public struct Applifecycle {
    public static let appLifecycle: Swift.String
  }
}
public protocol LogStorage {
  func save(data: Foundation.Data)
  func loadNext() -> Foundation.Data?
  func removeLastLoaded()
  func flush()
}
public class FileLogStorage : IMQACore.LogStorage {
  public init()
  public func save(data: Foundation.Data)
  public func loadNext() -> Foundation.Data?
  public func removeLastLoaded()
  public func flush()
  @objc deinit
}
public protocol SpanStorage {
  func save(data: Foundation.Data)
  func loadNext() -> Foundation.Data?
  func removeLastLoaded()
  func flush()
}
public class FileSpanStorage : IMQACore.SpanStorage {
  public init()
  public func save(data: Foundation.Data)
  public func loadNext() -> Foundation.Data?
  public func removeLastLoaded()
  public func flush()
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (IMQACore.Reachability) -> ()
  public typealias NetworkUnreachable = (IMQACore.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: IMQACore.Reachability.NetworkStatus, b: IMQACore.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: IMQACore.Reachability.Connection
    public static func == (a: IMQACore.Reachability.Connection, b: IMQACore.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: IMQACore.Reachability.NetworkReachable?
  public var whenUnreachable: IMQACore.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: IMQACore.Reachability.Connection {
    get
  }
  public var connection: IMQACore.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension IMQACore.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension IMQACore.CaptureServiceState : Swift.Equatable {}
extension IMQACore.CaptureServiceState : Swift.Hashable {}
extension IMQACore.CaptureServiceState : Swift.RawRepresentable {}
extension IMQACore.CustomCompressionType : Swift.Equatable {}
extension IMQACore.CustomCompressionType : Swift.Hashable {}
extension IMQACore.ExportResult : Swift.Equatable {}
extension IMQACore.ExportResult : Swift.Hashable {}
extension IMQACore.LogSeverity : Swift.Equatable {}
extension IMQACore.LogSeverity : Swift.Hashable {}
extension IMQACore.LogSeverity : Swift.RawRepresentable {}
extension IMQACore.OpenTelemetryContextKeys : Swift.Equatable {}
extension IMQACore.OpenTelemetryContextKeys : Swift.Hashable {}
extension IMQACore.OpenTelemetryContextKeys : Swift.RawRepresentable {}
extension IMQACore.ResourceAttributes : Swift.Equatable {}
extension IMQACore.ResourceAttributes : Swift.Hashable {}
extension IMQACore.ResourceAttributes : Swift.RawRepresentable {}
extension IMQACore.ResourceAttributes.AwsEcsLaunchtypeValues : Swift.Equatable {}
extension IMQACore.ResourceAttributes.AwsEcsLaunchtypeValues : Swift.Hashable {}
extension IMQACore.ResourceAttributes.AwsEcsLaunchtypeValues : Swift.RawRepresentable {}
extension IMQACore.Severity : Swift.Hashable {}
extension IMQACore.Severity : Swift.RawRepresentable {}
extension IMQACore.SpanExporterResultCode : Swift.Equatable {}
extension IMQACore.SpanExporterResultCode : Swift.Hashable {}
extension IMQACore.SpanKind : Swift.Hashable {}
extension IMQACore.SpanKind : Swift.RawRepresentable {}
extension IMQACore.IMQA.LogLevel : Swift.Equatable {}
extension IMQACore.IMQA.LogLevel : Swift.Hashable {}
extension IMQACore.IMQA.LogLevel : Swift.RawRepresentable {}
extension IMQACore.IMQASpanType : Swift.Equatable {}
extension IMQACore.IMQASpanType : Swift.Hashable {}
extension IMQACore.IMQASpanType : Swift.RawRepresentable {}
extension IMQACore.SpanSemantics.EventValue : Swift.Equatable {}
extension IMQACore.SpanSemantics.EventValue : Swift.Hashable {}
extension IMQACore.SpanSemantics.EventValue : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension IMQACore.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension IMQACore.Reachability.NetworkStatus : Swift.Hashable {}
extension IMQACore.Reachability.Connection : Swift.Equatable {}
extension IMQACore.Reachability.Connection : Swift.Hashable {}
