// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name IMQACore
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import Compression
import CoreFoundation
import CoreTelephony
import CryptoKit
import Foundation
import IMQACollectDeviceInfo
import IMQACommonInternal
import IMQAObjCUtilsInternal
import IMQAOtelInternal
import KSCrash
import MMKV
import MachO
import Network
import OpenTelemetryApi
import OpenTelemetrySdk
import Security
import Swift
import SwiftProtobuf
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc extension IMQACore.CaptureService {
  @objc public static func urlSession(options: IMQACore.URLSessionCaptureService.Options = URLSessionCaptureService.Options()) -> IMQACore.URLSessionCaptureService
  @objc public static func tap(options: IMQACore.TapCaptureService.Options = TapCaptureService.Options()) -> IMQACore.TapCaptureService
  @objc public static func view() -> IMQACore.ViewCaptureService
  @objc public static func webView(options: IMQACore.WebViewCaptureService.Options = WebViewCaptureService.Options()) -> IMQACore.WebViewCaptureService
  @objc public static func lowMemoryWarning() -> IMQACore.LowMemoryWarningCaptureService
  @objc public static func lowPowerMode() -> IMQACore.LowPowerModeCaptureService
  @objc public static func pushNotification(options: IMQACore.PushNotificationCaptureService.Options = PushNotificationCaptureService.Options()) -> IMQACore.PushNotificationCaptureService
}
@objc @_inheritsConvenienceInitializers open class CaptureService : ObjectiveC.NSObject {
  weak public var otel: (any IMQACore.IMQAOpenTelemetry)? {
    get
  }
  weak public var logger: (any IMQACore.InternalLogger)? {
    get
  }
  @IMQACommonInternal.ThreadSafe public var state: IMQACore.CaptureServiceState {
    get
  }
  public func install(otel: (any IMQACore.IMQAOpenTelemetry)?, logger: (any IMQACore.InternalLogger)? = nil)
  public func start()
  public func stop()
  @objc open func onInstall()
  @objc open func onStart()
  @objc open func onStop()
  @objc override dynamic public init()
  @objc deinit
}
extension IMQACore.CaptureService {
  @discardableResult
  public func add(event: IMQACore.RecordingSpanEvent) -> Swift.Bool
  @discardableResult
  public func add(events: [IMQACore.RecordingSpanEvent]) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class CaptureServiceBuilder : ObjectiveC.NSObject {
  @objc public func build() -> [IMQACore.CaptureService]
  @discardableResult
  @objc public func add(_ service: IMQACore.CaptureService) -> Self
  @discardableResult
  @objc public func remove(ofType type: Swift.AnyClass) -> Self
  @discardableResult
  @objc public func addAll() -> Self
  @discardableResult
  @objc public func addBasicServices() -> Self
  @objc override dynamic public init()
  @objc deinit
}
public enum CaptureServiceFactory {
}
@objc public enum CaptureServiceState : Swift.Int {
  case uninstalled
  case installed
  case active
  case paused
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LastRunState : Swift.Int {
  case unavailable, crash, cleanExit
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol CrashReporter {
  @objc var currentSessionId: Swift.String? { get set }
  @objc func install(context: IMQACore.CrashReporterContext, logger: any IMQACore.InternalLogger)
  @objc func getLastRunState() -> IMQACore.LastRunState
  @objc func fetchUnsentCrashReports(completion: @escaping ([IMQACore.CrashReport]) -> Swift.Void)
  @objc func deleteCrashReport(id: Swift.Int)
  @objc var onNewReport: ((IMQACore.CrashReport) -> Swift.Void)? { get set }
}
public protocol ExtendableCrashReporter : IMQACore.CrashReporter {
  func appendCrashInfo(key: Swift.String, value: Swift.String)
}
@objc public class CrashReport : ObjectiveC.NSObject {
  public var id: Foundation.UUID {
    get
  }
  public var payload: Swift.String {
    get
  }
  public var provider: Swift.String {
    get
  }
  public var internalId: Swift.Int? {
    get
  }
  public var sessionId: Swift.String? {
    get
  }
  public var timestamp: Foundation.Date? {
    get
  }
  public var spanRecord: IMQACore.SpanRecord? {
    get
  }
  public init(payload: Swift.String, provider: Swift.String, internalId: Swift.Int? = nil, sessionId: Swift.String? = nil, timestamp: Foundation.Date? = nil, spanRecord: IMQACore.SpanRecord? = nil)
  @objc deinit
}
@objc final public class CrashReporterContext : ObjectiveC.NSObject {
  final public let appId: Swift.String?
  final public let sdkVersion: Swift.String
  final public let filePathProvider: any IMQACore.FilePathProvider
  final public let notificationCenter: Foundation.NotificationCenter
  public init(appId: Swift.String?, sdkVersion: Swift.String, filePathProvider: any IMQACore.FilePathProvider, notificationCenter: Foundation.NotificationCenter)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CrashlyticsReporter : ObjectiveC.NSObject, IMQACore.CrashReporter {
  @objc convenience override dynamic public init()
  @objc final public var currentSessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var onNewReport: ((IMQACore.CrashReport) -> Swift.Void)?
  @objc final public func getLastRunState() -> IMQACore.LastRunState
  @objc final public func install(context: IMQACore.CrashReporterContext, logger: any IMQACore.InternalLogger)
  @objc deinit
  @objc final public func fetchUnsentCrashReports(completion: @escaping ([IMQACore.CrashReport]) -> Swift.Void)
  @objc final public func deleteCrashReport(id: Swift.Int)
}
extension IMQACore.CrashlyticsReporter : IMQACore.ExtendableCrashReporter {
  final public func appendCrashInfo(key: Swift.String, value: Swift.String)
}
@objc @_inheritsConvenienceInitializers final public class IMQACrashReporter : ObjectiveC.NSObject, IMQACore.CrashReporter {
  final public var basePath: Swift.String? {
    get
  }
  @objc final public var currentSessionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc final public var onNewReport: ((IMQACore.CrashReport) -> Swift.Void)?
  @objc final public func getLastRunState() -> IMQACore.LastRunState
  @objc final public func install(context: IMQACore.CrashReporterContext, logger: any IMQACore.InternalLogger)
  @objc final public func fetchUnsentCrashReports(completion: @escaping ([IMQACore.CrashReport]) -> Swift.Void)
  @objc final public func deleteCrashReport(id: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
extension IMQACore.IMQACrashReporter : IMQACore.ExtendableCrashReporter {
  final public func appendCrashInfo(key: Swift.String, value: Swift.String)
}
extension IMQACore.IMQACrashReporter {
  public static func removeCrashSpanRecord(sessionId: Swift.String)
}
@_inheritsConvenienceInitializers @objc(IMQALowMemoryWarningCaptureService) public class LowMemoryWarningCaptureService : IMQACore.CaptureService {
  public var onWarningCaptured: (() -> Swift.Void)?
  @objc deinit
  @objc override public func onInstall()
  @objc override dynamic public init()
}
@objc(IMQALowPowerModeCaptureService) public class LowPowerModeCaptureService : IMQACore.CaptureService {
  final public let provider: any IMQACore.PowerModeProvider
  public init(provider: any IMQACore.PowerModeProvider = DefaultPowerModeProvider())
  @objc deinit
  @objc override public func onInstall()
  @objc override public func onStart()
  @objc override public func onStop()
}
public protocol PowerModeProvider {
  var isLowPowerModeEnabled: Swift.Bool { get }
}
@_inheritsConvenienceInitializers @objc(IMQADefaultPowerModeProvider) public class DefaultPowerModeProvider : ObjectiveC.NSObject, IMQACore.PowerModeProvider {
  @objc public var isLowPowerModeEnabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let imqaConfigUpdated: Foundation.Notification.Name
}
@_hasMissingDesignatedInitializers @objc final public class NetworkPayloadCaptureRule : ObjectiveC.NSObject, Swift.Decodable {
  final public let id: Swift.String
  final public let urlRegex: Swift.String
  final public let statusCodes: [Swift.Int]?
  final public let methods: [Swift.String]?
  final public let expiration: Swift.Double
  final public let publicKey: Swift.String
  final public var expirationDate: Foundation.Date {
    get
  }
  @objc deinit
  public init(from decoder: any Swift.Decoder) throws
}
extension IMQACore.NetworkPayloadCaptureRule {
  public static func == (lhs: IMQACore.NetworkPayloadCaptureRule, rhs: IMQACore.NetworkPayloadCaptureRule) -> Swift.Bool
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (IMQACore.Reachability) -> ()
  public typealias NetworkUnreachable = (IMQACore.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: IMQACore.Reachability.NetworkStatus, b: IMQACore.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: IMQACore.Reachability.Connection
    public static func == (a: IMQACore.Reachability.Connection, b: IMQACore.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: IMQACore.Reachability.NetworkReachable?
  public var whenUnreachable: IMQACore.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: IMQACore.Reachability.Connection {
    get
  }
  public var connection: IMQACore.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension IMQACore.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension IMQACore.URLSessionCaptureService {
  @objc @_inheritsConvenienceInitializers final public class Options : ObjectiveC.NSObject {
    @objc final public let injectTracingHeader: Swift.Bool
    @objc final public let requestsDataSource: (any IMQACore.URLSessionRequestsDataSource)?
    @objc public init(injectTracingHeader: Swift.Bool, requestsDataSource: (any IMQACore.URLSessionRequestsDataSource)?)
    @objc convenience override dynamic public init()
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(IMQAURLSessionCaptureService) final public class URLSessionCaptureService : IMQACore.CaptureService {
  final public let options: IMQACore.URLSessionCaptureService.Options
  @objc convenience public init(options: IMQACore.URLSessionCaptureService.Options)
  @objc convenience override dynamic public init()
  @objc override final public func onInstall()
  @objc deinit
}
@objc public protocol URLSessionRequestsDataSource : ObjectiveC.NSObjectProtocol {
  @objc func modifiedRequest(for request: Foundation.URLRequest) -> Foundation.URLRequest
}
public protocol URLSessionTaskHandler : AnyObject {
  @discardableResult
  func create(task: Foundation.URLSessionTask) -> Swift.Bool
  func finish(task: Foundation.URLSessionTask, data: Foundation.Data?, error: (any Swift.Error)?)
}
extension IMQACore.PushNotificationCaptureService {
  @_inheritsConvenienceInitializers @objc(IMQAPushNotificationCaptureServiceOptions) final public class Options : ObjectiveC.NSObject {
    @objc final public let captureData: Swift.Bool
    @objc public init(captureData: Swift.Bool)
    @objc convenience override dynamic public init()
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class PushNotificationCaptureService : IMQACore.CaptureService {
  @objc final public let options: IMQACore.PushNotificationCaptureService.Options
  @objc convenience public init(options: IMQACore.PushNotificationCaptureService.Options)
  @objc convenience override dynamic public init()
  @objc override final public func onInstall()
  @objc deinit
}
public enum PushNotificationError : Swift.Error, Swift.Equatable {
  case invalidPayload(_: Swift.String)
  public static func == (a: IMQACore.PushNotificationError, b: IMQACore.PushNotificationError) -> Swift.Bool
}
extension IMQACore.PushNotificationError : Foundation.LocalizedError, Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(IMQAPushNotificationEvent) public class PushNotificationEvent : ObjectiveC.NSObject, IMQACore.SpanEvent {
  final public let name: Swift.String
  final public let timestamp: Foundation.Date
  public var attributes: [Swift.String : OpenTelemetryApi.AttributeValue] {
    get
  }
  @objc deinit
}
extension IMQACore.SpanEvent where Self == IMQACore.PushNotificationEvent {
  public static func push(notification: UserNotifications.UNNotification, properties: [Swift.String : Swift.String] = [:]) throws -> any IMQACore.SpanEvent
  public static func push(userInfo: [Swift.AnyHashable : Any], properties: [Swift.String : Swift.String] = [:]) throws -> any IMQACore.SpanEvent
}
extension IMQACore.TapCaptureService {
  @_inheritsConvenienceInitializers @objc(IMQATapCaptureServiceOptions) final public class Options : ObjectiveC.NSObject {
    @objc final public let ignoredViewTypes: [Swift.AnyClass]
    @objc final public let captureTapCoordinates: Swift.Bool
    @objc final public let delegate: (any IMQACore.TapCaptureServiceDelegate)?
    @objc public init(ignoredViewTypes: [Swift.AnyClass] = [], captureTapCoordinates: Swift.Bool = true, delegate: (any IMQACore.TapCaptureServiceDelegate)? = nil)
    @objc convenience override dynamic public init()
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers @objc(IMQATapCaptureService) final public class TapCaptureService : IMQACore.CaptureService {
  final public let options: IMQACore.TapCaptureService.Options
  @objc convenience public init(options: IMQACore.TapCaptureService.Options = TapCaptureService.Options())
  @objc override final public func onInstall()
  @objc deinit
}
@objc(IMQATapCaptureServiceDelegate) public protocol TapCaptureServiceDelegate : ObjectiveC.NSObjectProtocol {
  @objc func shouldCaptureTap(onView: UIKit.UIView) -> Swift.Bool
  @objc func shouldCaptureTapCoordinates(onView: UIKit.UIView) -> Swift.Bool
}
public protocol IMQAViewControllerCustomization {
  var nameForViewControllerInIMQA: Swift.String? { get }
  var shouldCaptureViewInIMQA: Swift.Bool { get }
}
extension IMQACore.IMQAViewControllerCustomization where Self : UIKit.UIViewController {
  public var nameForViewControllerInIMQA: Swift.String? {
    get
  }
  public var shouldCaptureViewInIMQA: Swift.Bool {
    get
  }
}
public protocol InstrumentableViewController : UIKit.UIViewController {
}
extension IMQACore.InstrumentableViewController {
  public func buildChildSpan(name: Swift.String, type: IMQAOtelInternal.IMQASpanType = .RENDER, startTime: Foundation.Date = Date(), attributes: [Swift.String : Swift.String] = [:]) throws -> (any OpenTelemetryApi.SpanBuilder)?
  public func recordCompletedChildSpan(name: Swift.String, type: IMQAOtelInternal.IMQASpanType = .RENDER, startTime: Foundation.Date, endTime: Foundation.Date, attributes: [Swift.String : Swift.String] = [:]) throws
}
public protocol InteractableViewController : UIKit.UIViewController {
}
extension IMQACore.InteractableViewController {
  public func setInteractionReady() throws
}
extension IMQACore.ViewCaptureService {
  @_inheritsConvenienceInitializers @objc(IMQAViewCaptureServiceOptions) final public class Options : ObjectiveC.NSObject {
    @objc final public let instrumentVisibility: Swift.Bool
    @objc final public let instrumentFirstRender: Swift.Bool
    @objc public init(instrumentVisibility: Swift.Bool, instrumentFirstRender: Swift.Bool)
    @objc convenience override dynamic public init()
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(IMQAViewCaptureService) final public class ViewCaptureService : IMQACore.CaptureService {
  final public let options: IMQACore.ViewCaptureService.Options
  @objc convenience public init(options: IMQACore.ViewCaptureService.Options)
  @objc convenience override dynamic public init()
  @objc override final public func onInstall()
  @objc deinit
}
public enum ViewCaptureServiceError : Swift.Error, Swift.Equatable {
  case serviceNotFound(_: Swift.String)
  case firstRenderInstrumentationDisabled(_: Swift.String)
  case parentSpanNotFound(_: Swift.String)
  public static func == (a: IMQACore.ViewCaptureServiceError, b: IMQACore.ViewCaptureServiceError) -> Swift.Bool
}
extension IMQACore.ViewCaptureServiceError : Foundation.LocalizedError, Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
}
extension IMQACore.WebViewCaptureService {
  @_inheritsConvenienceInitializers @objc(IMQAWebViewCaptureServiceOptions) final public class Options : ObjectiveC.NSObject {
    @objc final public let stripQueryParams: Swift.Bool
    @objc public init(stripQueryParams: Swift.Bool)
    @objc convenience override dynamic public init()
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(IMQAWebViewCaptureService) final public class WebViewCaptureService : IMQACore.CaptureService {
  @objc final public let options: IMQACore.WebViewCaptureService.Options
  @objc convenience public init(options: IMQACore.WebViewCaptureService.Options)
  @objc convenience override dynamic public init()
  @objc override final public func onInstall()
  @objc deinit
}
public protocol IMQALoggerConfig : Swift.Equatable {
  var batchLifetimeInSeconds: Swift.Int { get }
  var maximumTimeBetweenLogsInSeconds: Swift.Int { get }
  var maximumMessageLength: Swift.Int { get }
  var maximumAttributes: Swift.Int { get }
  var logAmountLimit: Swift.Int { get }
}
@objc public class OpenTelemetryExporter : ObjectiveC.NSObject {
  final public let spanExporter: (any OpenTelemetrySdk.SpanExporter)?
  final public let logExporter: (any OpenTelemetrySdk.LogRecordExporter)?
  public init(spanExporter: (any OpenTelemetrySdk.SpanExporter)? = nil, logExporter: (any OpenTelemetrySdk.LogRecordExporter)? = nil)
  @objc deinit
}
public class CustomOtlpHttpExporterBase {
  public init(endpoint: Foundation.URL, config: IMQACore.CustomOtlpConfiguration = CustomOtlpConfiguration(), useSession: Foundation.URLSession? = nil, envVarHeaders: [(Swift.String, Swift.String)]? = CustomEnvVarHeaders.attributes)
  public func createRequest(body: any SwiftProtobuf.Message, endpoint: Foundation.URL) -> Foundation.URLRequest
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers public class CustomOtlpHttpTraceExporter : IMQACore.CustomOtlpHttpExporterBase, OpenTelemetrySdk.SpanExporter {
  convenience public init(endpoint: Foundation.URL, config: IMQACore.CustomOtlpConfiguration = CustomOtlpConfiguration(), useSession: Foundation.URLSession? = nil, envVarHeaders: [(Swift.String, Swift.String)]? = CustomEnvVarHeaders.attributes, uploadCache: IMQACore.IMQAUploadCache)
  public func export(spans: [OpenTelemetrySdk.SpanData], explicitTimeout: Foundation.TimeInterval? = nil) -> OpenTelemetrySdk.SpanExporterResultCode
  public func flush(explicitTimeout: Foundation.TimeInterval? = nil) -> OpenTelemetrySdk.SpanExporterResultCode
  override public init(endpoint: Foundation.URL, config: IMQACore.CustomOtlpConfiguration = super, useSession: Foundation.URLSession? = nil, envVarHeaders: [(Swift.String, Swift.String)]? = super)
  @objc deinit
}
public struct CustomEnvVarHeaders {
  public static let attributes: [(Swift.String, Swift.String)]?
  public static func attributes(for rawEnvAttributes: Swift.String? = ProcessInfo.processInfo.environment["OTEL_EXPORTER_OTLP_HEADERS"]) -> [(Swift.String, Swift.String)]?
}
@_hasMissingDesignatedInitializers @objc public class IMQA : ObjectiveC.NSObject {
  @objc public static var client: IMQACore.IMQA?
  public var options: IMQACore.IMQA.Options {
    get
  }
  @objc public var started: Swift.Bool {
    get
  }
  public var deviceId: IMQACommonInternal.DeviceIdentifier {
    get
  }
  @objc public var logLevel: IMQAOtelInternal.LogLevel {
    @objc get
    @objc set
  }
  @objc deinit
}
extension IMQACore.IMQA {
  @discardableResult
  @objc dynamic public func start() throws -> IMQACore.IMQA
  @discardableResult
  @objc public static func setup(options: IMQACore.IMQA.Options) throws -> IMQACore.IMQA
}
extension IMQACore.IMQA {
  public static func setUserId(id: Swift.String?)
  public static func getUserId() -> Swift.String?
  public static func customLog(level: IMQAOtelInternal.LogLevel, message: Swift.String)
}
extension IMQACore.IMQA {
  @objc dynamic public func currentSessionId() -> Swift.String?
}
extension OpenTelemetryApi.Severity {
  public func toLogSeverity() -> IMQAOtelInternal.LogSeverity?
  public static func fromLogSeverity(_ logSeverity: IMQAOtelInternal.LogSeverity) -> OpenTelemetryApi.Severity?
}
extension OpenTelemetrySdk.SpanData {
  public var spanType: IMQAOtelInternal.IMQASpanType {
    get
  }
  public var errorCode: IMQACommonInternal.ErrorCode? {
    get
  }
  public func toJSON() throws -> Foundation.Data
}
public struct W3C {
}
extension IMQACore.W3C {
  public static let traceparentHeaderName: Swift.String
  public static func traceparent(from span: any OpenTelemetryApi.Span) -> Swift.String
  public static func traceparent(from context: OpenTelemetryApi.SpanContext) -> Swift.String
  public static func traceparent(traceId: Swift.String, spanId: Swift.String, sampled: Swift.Bool = false) -> Swift.String
}
public protocol IMQALogSharedState {
  var processors: [any OpenTelemetrySdk.LogRecordProcessor] { get }
  var config: any IMQACore.IMQALoggerConfig { get }
  var resourceProvider: any IMQACore.IMQAResourceProvider { get }
  func update(_ config: any IMQACore.IMQALoggerConfig)
}
public protocol IMQALoggerProvider : OpenTelemetryApi.LoggerProvider {
  func get() -> any OpenTelemetryApi.Logger
  func update(_ config: any IMQACore.IMQALoggerConfig)
}
extension Foundation.NSNotification.Name {
  public static let imqaSessionDidStart: Foundation.Notification.Name
  public static let imqaSessionWillEnd: Foundation.Notification.Name
}
@objc public protocol InternalLogger {
  @discardableResult
  @objc func log(level: IMQAOtelInternal.LogLevel, message: Swift.String, attributes: [Swift.String : Swift.String]) -> Swift.Bool
  @discardableResult
  @objc func log(level: IMQAOtelInternal.LogLevel, message: Swift.String) -> Swift.Bool
  @discardableResult
  @objc func trace(_ message: Swift.String, attributes: [Swift.String : Swift.String]) -> Swift.Bool
  @discardableResult
  @objc func trace(_ message: Swift.String) -> Swift.Bool
  @discardableResult
  @objc func debug(_ message: Swift.String, attributes: [Swift.String : Swift.String]) -> Swift.Bool
  @discardableResult
  @objc func debug(_ message: Swift.String) -> Swift.Bool
  @discardableResult
  @objc func info(_ message: Swift.String, attributes: [Swift.String : Swift.String]) -> Swift.Bool
  @discardableResult
  @objc func info(_ message: Swift.String) -> Swift.Bool
  @discardableResult
  @objc func warning(_ message: Swift.String, attributes: [Swift.String : Swift.String]) -> Swift.Bool
  @discardableResult
  @objc func warning(_ message: Swift.String) -> Swift.Bool
  @discardableResult
  @objc func error(_ message: Swift.String, attributes: [Swift.String : Swift.String]) -> Swift.Bool
  @discardableResult
  @objc func error(_ message: Swift.String) -> Swift.Bool
}
public struct RecordingSpanEvent : IMQACore.SpanEvent, Swift.Codable, Swift.Equatable {
  public let name: Swift.String
  public let timestamp: Foundation.Date
  public let attributes: [Swift.String : OpenTelemetryApi.AttributeValue]
  public init(name: Swift.String, timestamp: Foundation.Date, attributes: [Swift.String : OpenTelemetryApi.AttributeValue] = [:])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public func == (lhs: IMQACore.RecordingSpanEvent, rhs: IMQACore.RecordingSpanEvent) -> Swift.Bool
public func == (lhs: [IMQACore.RecordingSpanEvent], rhs: [IMQACore.RecordingSpanEvent]) -> Swift.Bool
public protocol SpanEvent {
  var name: Swift.String { get }
  var timestamp: Foundation.Date { get }
  var attributes: [Swift.String : OpenTelemetryApi.AttributeValue] { get }
}
extension OpenTelemetrySdk.SpanData.Event : IMQACore.SpanEvent {
}
public protocol SpanLink {
  var context: OpenTelemetryApi.SpanContext { get }
  var attributes: [Swift.String : OpenTelemetryApi.AttributeValue] { get }
}
extension OpenTelemetrySdk.SpanData.Link : IMQACore.SpanLink {
}
public protocol VVIdenti {
  var vvid: Swift.String { get }
}
public class CrashSpanRecord : Swift.Codable, IMQACore.VVIdenti {
  public var id: Swift.String
  public var name: Swift.String
  public var traceId: Swift.String
  public var type: IMQAOtelInternal.IMQASpanType
  public var data: Foundation.Data
  public var startTime: Foundation.Date
  public var endTime: Foundation.Date?
  public var processIdentifier: IMQACommonInternal.ProcessIdentifier
  public var sessionId: Swift.String
  public var vvid: Swift.String {
    get
  }
  convenience public init(spanRecord: IMQACore.SpanRecord, sessionId: Swift.String)
  public init(id: Swift.String, name: Swift.String, traceId: Swift.String, type: IMQAOtelInternal.IMQASpanType, data: Foundation.Data, startTime: Foundation.Date, endTime: Foundation.Date? = nil, processIdentifier: IMQACommonInternal.ProcessIdentifier, sessionId: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension IMQACore.CrashSpanRecord {
  public func toSpanRecord() -> IMQACore.SpanRecord
}
public struct LogRecord : Swift.Codable, IMQACore.VVIdenti {
  public var identifier: IMQACommonInternal.LogIdentifier
  public var processIdentifier: IMQACommonInternal.ProcessIdentifier
  public var severity: IMQAOtelInternal.LogSeverity
  public var body: Swift.String
  public var timestamp: Foundation.Date
  public var attributes: [Swift.String : IMQACommonInternal.PersistableValue]
  public var spanContext: OpenTelemetryApi.SpanContext?
  public var vvid: Swift.String {
    get
  }
  public init(identifier: IMQACommonInternal.LogIdentifier, processIdentifier: IMQACommonInternal.ProcessIdentifier, severity: IMQAOtelInternal.LogSeverity, body: Swift.String, attributes: [Swift.String : IMQACommonInternal.PersistableValue], timestamp: Foundation.Date = Date(), spanContext: OpenTelemetryApi.SpanContext?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum MetadataRecordType : Swift.String, Swift.Codable {
  case resource
  case requiredResource
  case customProperty
  case personaTag
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MetadataRecordLifespan : Swift.String, Swift.Codable {
  case session
  case process
  case permanent
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct MetadataRecord : Swift.Codable, IMQACore.VVIdenti {
  public var vvid: Swift.String {
    get
  }
  public let key: Swift.String
  public var value: OpenTelemetryApi.AttributeValue
  public let type: IMQACore.MetadataRecordType
  public let lifespan: IMQACore.MetadataRecordLifespan
  public let lifespanId: Swift.String
  public let collectedAt: Foundation.Date
  public init(key: Swift.String, value: OpenTelemetryApi.AttributeValue, type: IMQACore.MetadataRecordType, lifespan: IMQACore.MetadataRecordLifespan, lifespanId: Swift.String, collectedAt: Foundation.Date = Date())
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension IMQACore.MetadataRecord {
  public static let lifespanIdForPermanent: Swift.String
}
extension IMQACore.MetadataRecord {
  public var boolValue: Swift.Bool? {
    get
  }
  public var integerValue: Swift.Int? {
    get
  }
  public var doubleValue: Swift.Double? {
    get
  }
  public var stringValue: Swift.String? {
    get
  }
  public var uuidValue: Foundation.UUID? {
    get
  }
}
public class SessionRecord : Swift.Codable, IMQACore.VVIdenti {
  public var id: IMQACommonInternal.SessionIdentifier
  public var processId: IMQACommonInternal.ProcessIdentifier
  public var state: Swift.String
  public var traceId: Swift.String
  public var spanId: Swift.String
  public var startTime: Foundation.Date
  public var endTime: Foundation.Date?
  public var lastHeartbeatTime: Foundation.Date
  public var crashReportId: Swift.String?
  public var coldStart: Swift.Bool
  public var cleanExit: Swift.Bool
  public var appTerminated: Swift.Bool
  public var vvid: Swift.String {
    get
  }
  public init(id: IMQACommonInternal.SessionIdentifier, processId: IMQACommonInternal.ProcessIdentifier, state: Swift.String, traceId: Swift.String, spanId: Swift.String, startTime: Foundation.Date, endTime: Foundation.Date? = nil, lastHeartbeatTime: Foundation.Date? = nil, crashReportId: Swift.String? = nil, coldStart: Swift.Bool = false, cleanExit: Swift.Bool = false, appTerminated: Swift.Bool = false)
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public class SpanRecord : Swift.Codable, IMQACore.VVIdenti {
  public var id: Swift.String
  public var name: Swift.String
  public var traceId: Swift.String
  public var type: IMQAOtelInternal.IMQASpanType
  public var data: Foundation.Data
  public var startTime: Foundation.Date
  public var endTime: Foundation.Date?
  public var processIdentifier: IMQACommonInternal.ProcessIdentifier
  public var vvid: Swift.String {
    get
  }
  public init(id: Swift.String, name: Swift.String, traceId: Swift.String, type: IMQAOtelInternal.IMQASpanType, data: Foundation.Data, startTime: Foundation.Date, endTime: Foundation.Date? = nil, processIdentifier: IMQACommonInternal.ProcessIdentifier = .current)
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public typealias ResourceValue = OpenTelemetryApi.AttributeValue
public protocol IMQAResource {
  var key: Swift.String { get }
  var value: IMQACore.ResourceValue { get }
}
public protocol IMQAResourceProvider {
  func getResource() -> OpenTelemetrySdk.Resource
}
extension OpenTelemetryApi.Span {
  public func end(errorCode: IMQACommonInternal.ErrorCode? = nil, time: Foundation.Date = Date())
  public func end(error: (any Swift.Error)?, errorCode: IMQACommonInternal.ErrorCode? = nil, time: Foundation.Date = Date())
}
extension OpenTelemetryApi.Span {
  public func add(events: [any IMQACore.SpanEvent])
}
public struct AppStatusSemantics {
}
@_hasMissingDesignatedInitializers final public class iOSSessionLifecycle {
  @objc deinit
}
public struct BatteryModel {
  public static var isCharging: Swift.Bool {
    get
  }
  public static var level: Swift.String {
    get
  }
}
public struct UserSemantics {
  public static let userProfileUserDefaultKey: Swift.String
}
public struct UserModel {
  public static var id: Swift.String? {
    get
  }
  public static var name: Swift.String? {
    get
  }
  public static var email: Swift.String? {
    get
  }
  public static func setUserId(_ id: Swift.String?)
  public static func setUserName(_ name: Swift.String?)
  public static func setUserEmail(_ email: Swift.String?)
}
public struct AreaCodeModel {
  public static func setAreaCode(_ areaCode: Swift.String?)
}
extension IMQACore.IMQA {
  @objc(IMQAEndpoits) public class Endpoints : ObjectiveC.NSObject {
    @objc final public let baseURL: Swift.String
    @objc public init(collectorURL: Swift.String)
    public enum OpentelemetryBaseUrl {
      case tracer(Swift.String)
      case metric(Swift.String)
      case logs(Swift.String)
    }
    @objc deinit
  }
}
extension IMQACore.IMQA {
  @objc(IMQAOptions) final public class Options : ObjectiveC.NSObject {
    final public let serviceKey: Swift.String
    final public let endpoints: IMQACore.IMQA.Endpoints?
    final public let services: [IMQACore.CaptureService]
    final public let crashReporter: (any IMQACore.CrashReporter)?
    final public var sampleRate: Swift.Double
    public init(serviceKey: Swift.String, endpoints: IMQACore.IMQA.Endpoints? = nil, sampleRate: Swift.Double = 1.0)
    @objc deinit
  }
}
extension Swift.Array where Element == IMQACore.CaptureService {
  public static var all: [IMQACore.CaptureService] {
    get
  }
  public static var basic: [IMQACore.CaptureService] {
    get
  }
}
extension IMQACore.IMQA : IMQACore.IMQAOpenTelemetry {
  public func tracer(instrumentationName: Swift.String) -> any OpenTelemetryApi.Tracer
  public func buildSpan(name: Swift.String, type: IMQAOtelInternal.IMQASpanType, attributes: [Swift.String : Swift.String] = [:]) -> any OpenTelemetryApi.SpanBuilder
  public func recordCompletedSpan(name: Swift.String, type: IMQAOtelInternal.IMQASpanType, parent: (any OpenTelemetryApi.Span)?, startTime: Foundation.Date, endTime: Foundation.Date, attributes: [Swift.String : Swift.String], events: [IMQACore.RecordingSpanEvent], errorCode: IMQACommonInternal.ErrorCode?)
  public func add(events: [any IMQACore.SpanEvent])
  public func add(event: any IMQACore.SpanEvent)
  public func flush(_ span: any OpenTelemetryApi.Span)
  public func log(_ message: Swift.String, severity: IMQAOtelInternal.LogSeverity, type: IMQAOtelInternal.IMQALogType, attributes: [Swift.String : Swift.String] = [:], stackTraceBehavior: IMQACommonInternal.StackTraceBehavior = .default)
  public func log(_ message: Swift.String, severity: IMQAOtelInternal.LogSeverity, type: IMQAOtelInternal.IMQALogType, timestamp: Foundation.Date, attributes: [Swift.String : Swift.String], stackTraceBehavior: IMQACommonInternal.StackTraceBehavior = .default)
  public func log(_ message: Swift.String, severity: IMQAOtelInternal.LogSeverity, type: IMQAOtelInternal.IMQALogType, spanContext: OpenTelemetryApi.SpanContext, timestamp: Foundation.Date, attributes: [Swift.String : Swift.String], stackTraceBehavior: IMQACommonInternal.StackTraceBehavior = .default)
}
extension IMQACore.IMQA {
  public static func recordSpan<T>(name: Swift.String, parent: (any OpenTelemetryApi.Span)? = nil, type: IMQAOtelInternal.IMQASpanType, attributes: [Swift.String : Swift.String] = [:], block: ((any OpenTelemetryApi.Span)?) throws -> T) rethrows -> T
}
extension IMQACore.IMQA {
  public func propagators(spanContext: OpenTelemetryApi.SpanContext)
  public func baggage(key: Swift.String, value: Swift.String, metadata: Swift.String?) -> (any OpenTelemetryApi.Baggage)?
}
@_hasMissingDesignatedInitializers public class IMQAOTel {
  @objc deinit
}
extension IMQACore.IMQAOTel {
  public func recordSpan<T>(name: Swift.String, type: IMQAOtelInternal.IMQASpanType, attributes: [Swift.String : Swift.String] = [:], spanOperation: () -> T) -> T
  public func buildSpan(name: Swift.String, type: IMQAOtelInternal.IMQASpanType, attributes: [Swift.String : Swift.String] = [:]) -> any OpenTelemetryApi.SpanBuilder
  public func log(_ message: Swift.String, severity: IMQAOtelInternal.LogSeverity, attributes: [Swift.String : Swift.String])
  public func log(_ message: Swift.String, severity: IMQAOtelInternal.LogSeverity, timestamp: Foundation.Date, attributes: [Swift.String : Swift.String])
  public func log(_ message: Swift.String, severity: IMQAOtelInternal.LogSeverity, spanContext: OpenTelemetryApi.SpanContext, timestamp: Foundation.Date, attributes: [Swift.String : Swift.String])
}
public protocol IMQAOpenTelemetry : AnyObject {
  func buildSpan(name: Swift.String, type: IMQAOtelInternal.IMQASpanType, attributes: [Swift.String : Swift.String]) -> any OpenTelemetryApi.SpanBuilder
  func recordCompletedSpan(name: Swift.String, type: IMQAOtelInternal.IMQASpanType, parent: (any OpenTelemetryApi.Span)?, startTime: Foundation.Date, endTime: Foundation.Date, attributes: [Swift.String : Swift.String], events: [IMQACore.RecordingSpanEvent], errorCode: IMQACommonInternal.ErrorCode?)
  func add(events: [any IMQACore.SpanEvent])
  func add(event: any IMQACore.SpanEvent)
  func log(_ message: Swift.String, severity: IMQAOtelInternal.LogSeverity, type: IMQAOtelInternal.IMQALogType, attributes: [Swift.String : Swift.String], stackTraceBehavior: IMQACommonInternal.StackTraceBehavior)
  func log(_ message: Swift.String, severity: IMQAOtelInternal.LogSeverity, type: IMQAOtelInternal.IMQALogType, timestamp: Foundation.Date, attributes: [Swift.String : Swift.String], stackTraceBehavior: IMQACommonInternal.StackTraceBehavior)
  func log(_ message: Swift.String, severity: IMQAOtelInternal.LogSeverity, type: IMQAOtelInternal.IMQALogType, spanContext: OpenTelemetryApi.SpanContext, timestamp: Foundation.Date, attributes: [Swift.String : Swift.String], stackTraceBehavior: IMQACommonInternal.StackTraceBehavior)
  func propagators(spanContext: OpenTelemetryApi.SpanContext)
  func baggage(key: Swift.String, value: Swift.String, metadata: Swift.String?) -> (any OpenTelemetryApi.Baggage)?
}
public struct SpanUtils {
}
extension IMQACommonInternal.DeviceIdentifier : IMQACore.VVIdenti {
  public var vvid: Swift.String {
    get
  }
}
public protocol FilePathProvider {
  func fileURL(for scope: Swift.String, name: Swift.String) -> Foundation.URL?
  func directoryURL(for scope: Swift.String) -> Foundation.URL?
}
public struct IMQAFileSystem {
  public static let defaultPartitionId: Swift.String
}
@_hasMissingDesignatedInitializers public class LogFileManager {
  public static let shared: IMQACore.LogFileManager
  public func recordToFile(text: Swift.String)
  @objc deinit
}
extension IMQACore.IMQAStorage {
  @discardableResult
  public func addMetadata(key: Swift.String, value: Swift.String, type: IMQACore.MetadataRecordType, lifespan: IMQACore.MetadataRecordLifespan, lifespanId: Swift.String = "") throws -> IMQACore.MetadataRecord?
  public func addMetadata(_ metadata: IMQACore.MetadataRecord) -> Swift.Bool
  public func updateMetadata(key: Swift.String, value: Swift.String, type: IMQACore.MetadataRecordType, lifespan: IMQACore.MetadataRecordLifespan)
  public func updateMetadata(_ record: IMQACore.MetadataRecord) throws
  public func cleanMetadata(currentSessionId: Swift.String?, currentProcessId: Swift.String)
  public func removeMetadata(key: Swift.String, type: IMQACore.MetadataRecordType, lifespan: IMQACore.MetadataRecordLifespan, lifespanId: Swift.String)
  public func removeAllMetadata(type: IMQACore.MetadataRecordType, lifespans: [IMQACore.MetadataRecordLifespan]) throws
  public func removeAllMetadata(keys: [Swift.String], lifespan: IMQACore.MetadataRecordLifespan) throws
  public func fetchMetadata(key: Swift.String, type: IMQACore.MetadataRecordType, lifespan: IMQACore.MetadataRecordLifespan, lifespanId: Swift.String = "") -> IMQACore.MetadataRecord?
  public func fetchRequiredPermanentResource(key: Swift.String) -> IMQACore.MetadataRecord?
  public func fetchAllResources() -> [IMQACore.MetadataRecord]
  public func fetchResourcesForSessionId(_ sessionId: IMQACommonInternal.SessionIdentifier) -> [IMQACore.MetadataRecord]
  public func fetchResourcesForProcessId(_ processId: IMQACommonInternal.ProcessIdentifier) -> [IMQACore.MetadataRecord]
  public func fetchCustomPropertiesForSessionId(_ sessionId: IMQACommonInternal.SessionIdentifier) -> [IMQACore.MetadataRecord]
  public func fetchPersonaTagsForSessionId(_ sessionId: IMQACommonInternal.SessionIdentifier) throws -> [IMQACore.MetadataRecord]
  public func fetchPersonaTagsForProcessId(_ processId: IMQACommonInternal.ProcessIdentifier) throws -> [IMQACore.MetadataRecord]
}
extension IMQACore.IMQAStorage {
  public enum StorageMechanism {
    case inMemory(name: Swift.String)
    case onDisk(baseURL: Foundation.URL, fileName: Swift.String)
  }
  public class Options {
    public var spanLimits: [IMQAOtelInternal.IMQASpanType : Swift.Int]
    public var resourcesLimit: Swift.Int
    public var customPropertiesLimit: Swift.Int
    public var personaTagsLimit: Swift.Int
    public init(baseUrl: Foundation.URL, fileName: Swift.String)
    public init(named name: Swift.String)
    @objc deinit
  }
}
extension IMQACore.IMQAStorage.Options {
  public var name: Swift.String? {
    get
  }
  public var baseUrl: Foundation.URL? {
    get
  }
  public var fileName: Swift.String? {
    get
  }
  public var fileURL: Foundation.URL? {
    get
  }
}
@_hasMissingDesignatedInitializers public class SessionSamplerRecord : Swift.Codable, IMQACore.VVIdenti {
  public var vvid: Swift.String {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension IMQACore.IMQAStorage {
  public func addSamplerRecord(_ record: IMQACore.SessionSamplerRecord)
  public func getSamplerRecord(_ sessionId: Swift.String) -> IMQACore.SessionSamplerRecord?
}
extension IMQACore.IMQAStorage {
  @discardableResult
  public func addSession(id: IMQACommonInternal.SessionIdentifier, state: IMQACommonInternal.SessionState, processId: IMQACommonInternal.ProcessIdentifier, traceId: Swift.String, spanId: Swift.String, startTime: Foundation.Date, endTime: Foundation.Date? = nil, lastHeartbeatTime: Foundation.Date? = nil, crashReportId: Swift.String? = nil) throws -> IMQACore.SessionRecord
  public func upsertSession(_ session: IMQACore.SessionRecord)
  public func fetchSession(id: IMQACommonInternal.SessionIdentifier) -> IMQACore.SessionRecord?
  public func fetchLatestSession(ignoringCurrentSessionId sessionId: IMQACommonInternal.SessionIdentifier? = nil) throws -> IMQACore.SessionRecord?
  public func fetchOldestSession() throws -> IMQACore.SessionRecord?
}
extension IMQACore.IMQAStorage {
  @discardableResult
  public func addSpan(id: Swift.String, name: Swift.String, traceId: Swift.String, type: IMQAOtelInternal.IMQASpanType, data: Foundation.Data, startTime: Foundation.Date, endTime: Foundation.Date? = nil, processIdentifier: IMQACommonInternal.ProcessIdentifier = .current) throws -> IMQACore.SpanRecord
  public func upsertSpan(_ span: IMQACore.SpanRecord) throws
  public func fetchSpan(id: Swift.String, traceId: Swift.String) throws -> IMQACore.SpanRecord?
  public func cleanUpSpans(date: Foundation.Date? = nil) throws
  public func closeOpenSpans(endTime: Foundation.Date)
  public func fetchSpans(for sessionRecord: IMQACore.SessionRecord, ignoreSessionSpans: Swift.Bool = true, limit: Swift.Int = 1000) -> [IMQACore.SpanRecord]
}
public typealias Storage = IMQACore.IMQAStorageMetadataFetcher & IMQACore.LogRepository
public class IMQAStorage : IMQACore.Storage {
  public var options: IMQACore.IMQAStorage.Options {
    get
  }
  public var appId: Swift.String {
    get
  }
  public var logger: any IMQACore.InternalLogger {
    get
  }
  public init(options: IMQACore.IMQAStorage.Options, logger: any IMQACore.InternalLogger, appId: Swift.String)
  @objc deinit
}
extension IMQACore.IMQAStorage {
  public func update(session: IMQACore.SessionRecord)
  @discardableResult
  public func delete(session: IMQACore.SessionRecord) -> Swift.Bool
  public func fetchAll() -> [IMQACore.SessionRecord]
  public func fetchOne(id: Swift.String) -> IMQACore.SessionRecord?
}
extension IMQACore.LogRecord : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
extension IMQACore.IMQAStorage {
  public func fetchAll(excludingProcessIdentifier processIdentifier: IMQACommonInternal.ProcessIdentifier) throws -> [IMQACore.LogRecord]
  public func removeAllLogs()
  public func remove(logs: [IMQACore.LogRecord])
  public func getAll() -> [IMQACore.LogRecord]
  public func create(_ log: IMQACore.LogRecord, completion: (Swift.Result<IMQACore.LogRecord, any Swift.Error>) -> Swift.Void)
}
public struct VersionSemantics {
}
public enum IMQAStorageError : Swift.Error, Swift.Equatable {
  case cannotUpsertSpan(spanName: Swift.String, message: Swift.String)
  public static func == (a: IMQACore.IMQAStorageError, b: IMQACore.IMQAStorageError) -> Swift.Bool
}
extension IMQACore.IMQAStorageError : Foundation.LocalizedError, Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
}
public protocol IMQAStorageMetadataFetcher : AnyObject {
  func fetchAllResources() throws -> [IMQACore.MetadataRecord]
  func fetchResourcesForSessionId(_ sessionId: IMQACommonInternal.SessionIdentifier) throws -> [IMQACore.MetadataRecord]
  func fetchResourcesForProcessId(_ processId: IMQACommonInternal.ProcessIdentifier) throws -> [IMQACore.MetadataRecord]
  func fetchCustomPropertiesForSessionId(_ sessionId: IMQACommonInternal.SessionIdentifier) throws -> [IMQACore.MetadataRecord]
  func fetchPersonaTagsForSessionId(_ sessionId: IMQACommonInternal.SessionIdentifier) throws -> [IMQACore.MetadataRecord]
  func fetchPersonaTagsForProcessId(_ processId: IMQACommonInternal.ProcessIdentifier) throws -> [IMQACore.MetadataRecord]
}
public protocol LogRepository {
  func create(_ log: IMQACore.LogRecord, completion: (Swift.Result<IMQACore.LogRecord, any Swift.Error>) -> Swift.Void)
  func fetchAll(excludingProcessIdentifier processIdentifier: IMQACommonInternal.ProcessIdentifier) throws -> [IMQACore.LogRecord]
  func remove(logs: [IMQACore.LogRecord]) throws
  func removeAllLogs() throws
}
public struct CustomCommonAdapter {
  public static func toProtoAttribute(key: Swift.String, attributeValue: OpenTelemetryApi.AttributeValue) -> IMQACore.Opentelemetry_Proto_Common_V1_KeyValue
  public static func toProtoAnyValue(attributeValue: OpenTelemetryApi.AttributeValue) -> IMQACore.Opentelemetry_Proto_Common_V1_AnyValue
  public static func toProtoInstrumentationScope(instrumentationScopeInfo: OpenTelemetrySdk.InstrumentationScopeInfo) -> IMQACore.Opentelemetry_Proto_Common_V1_InstrumentationScope
}
@_hasMissingDesignatedInitializers public class CustomLogRecordAdapter {
  public static func toProtoResourceRecordLog(logRecordList: [OpenTelemetrySdk.ReadableLogRecord]) -> [IMQACore.Opentelemetry_Proto_Logs_V1_ResourceLogs]
  @objc deinit
}
public enum CustomCompressionType {
  case gzip
  case deflate
  case none
  public static func == (a: IMQACore.CustomCompressionType, b: IMQACore.CustomCompressionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CustomOtlpConfiguration {
  public static let DefaultTimeoutInterval: Foundation.TimeInterval
  public let headers: [(Swift.String, Swift.String)]?
  public let timeout: Foundation.TimeInterval
  public let compression: IMQACore.CustomCompressionType
  public let exportAsJson: Swift.Bool
  public init(timeout: Foundation.TimeInterval = CustomOtlpConfiguration.DefaultTimeoutInterval, compression: IMQACore.CustomCompressionType = .gzip, headers: [(Swift.String, Swift.String)]? = nil, exportAsJson: Swift.Bool = true)
}
public struct CustomOtlpSpan : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CustomResourceAdapter {
  public static func toProtoResource(resource: OpenTelemetrySdk.Resource) -> IMQACore.Opentelemetry_Proto_Resource_V1_Resource
}
public struct CustomSpanAdapter {
  public static func toProtoResourceSpans(spanDataList: [OpenTelemetrySdk.SpanData]) -> [IMQACore.Opentelemetry_Proto_Trace_V1_ResourceSpans]
  public static func toProtoSpan(spanData: OpenTelemetrySdk.SpanData) -> IMQACore.Opentelemetry_Proto_Trace_V1_Span
  public static func toProtoSpanKind(kind: OpenTelemetryApi.SpanKind) -> IMQACore.Opentelemetry_Proto_Trace_V1_Span.SpanKind
  public static func toProtoSpanEvent(event: OpenTelemetrySdk.SpanData.Event) -> IMQACore.Opentelemetry_Proto_Trace_V1_Span.Event
  public static func toProtoSpanLink(link: OpenTelemetrySdk.SpanData.Link) -> IMQACore.Opentelemetry_Proto_Trace_V1_Span.Link
  public static func toStatusProto(status: OpenTelemetryApi.Status) -> IMQACore.Opentelemetry_Proto_Trace_V1_Status
}
public struct Opentelemetry_Proto_Common_V1_AnyValue {
  public var value: IMQACore.Opentelemetry_Proto_Common_V1_AnyValue.OneOf_Value?
  public var stringValue: Swift.String {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
  public var intValue: Swift.Int64 {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var arrayValue: IMQACore.Opentelemetry_Proto_Common_V1_ArrayValue {
    get
    set
  }
  public var kvlistValue: IMQACore.Opentelemetry_Proto_Common_V1_KeyValueList {
    get
    set
  }
  public var bytesValue: Foundation.Data {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Value : Swift.Equatable {
    case stringValue(Swift.String)
    case boolValue(Swift.Bool)
    case intValue(Swift.Int64)
    case doubleValue(Swift.Double)
    case arrayValue(IMQACore.Opentelemetry_Proto_Common_V1_ArrayValue)
    case kvlistValue(IMQACore.Opentelemetry_Proto_Common_V1_KeyValueList)
    case bytesValue(Foundation.Data)
    public static func == (a: IMQACore.Opentelemetry_Proto_Common_V1_AnyValue.OneOf_Value, b: IMQACore.Opentelemetry_Proto_Common_V1_AnyValue.OneOf_Value) -> Swift.Bool
  }
  public init()
}
public struct Opentelemetry_Proto_Common_V1_ArrayValue {
  public var values: [IMQACore.Opentelemetry_Proto_Common_V1_AnyValue]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Common_V1_KeyValueList {
  public var values: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Common_V1_KeyValue {
  public var key: Swift.String
  public var value: IMQACore.Opentelemetry_Proto_Common_V1_AnyValue {
    get
    set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public mutating func clearValue()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Common_V1_InstrumentationScope {
  public var name: Swift.String
  public var version: Swift.String
  public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var droppedAttributesCount: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension IMQACore.Opentelemetry_Proto_Common_V1_AnyValue : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Common_V1_AnyValue.OneOf_Value : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Common_V1_ArrayValue : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Common_V1_KeyValueList : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Common_V1_KeyValue : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Common_V1_InstrumentationScope : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Common_V1_AnyValue : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Common_V1_AnyValue, rhs: IMQACore.Opentelemetry_Proto_Common_V1_AnyValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Common_V1_ArrayValue : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Common_V1_ArrayValue, rhs: IMQACore.Opentelemetry_Proto_Common_V1_ArrayValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Common_V1_KeyValueList : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Common_V1_KeyValueList, rhs: IMQACore.Opentelemetry_Proto_Common_V1_KeyValueList) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Common_V1_KeyValue : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Common_V1_KeyValue, rhs: IMQACore.Opentelemetry_Proto_Common_V1_KeyValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Common_V1_InstrumentationScope : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Common_V1_InstrumentationScope, rhs: IMQACore.Opentelemetry_Proto_Common_V1_InstrumentationScope) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum Opentelemetry_Proto_Logs_V1_SeverityNumber : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case unspecified
  case trace
  case trace2
  case trace3
  case trace4
  case debug
  case debug2
  case debug3
  case debug4
  case info
  case info2
  case info3
  case info4
  case warn
  case warn2
  case warn3
  case warn4
  case error
  case error2
  case error3
  case error4
  case fatal
  case fatal2
  case fatal3
  case fatal4
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_SeverityNumber : Swift.CaseIterable {
  public static var allCases: [IMQACore.Opentelemetry_Proto_Logs_V1_SeverityNumber]
  public typealias AllCases = [IMQACore.Opentelemetry_Proto_Logs_V1_SeverityNumber]
}
public enum Opentelemetry_Proto_Logs_V1_LogRecordFlags : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case doNotUse
  case traceFlagsMask
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_LogRecordFlags : Swift.CaseIterable {
  public static var allCases: [IMQACore.Opentelemetry_Proto_Logs_V1_LogRecordFlags]
  public typealias AllCases = [IMQACore.Opentelemetry_Proto_Logs_V1_LogRecordFlags]
}
public struct Opentelemetry_Proto_Logs_V1_LogsData {
  public var resourceLogs: [IMQACore.Opentelemetry_Proto_Logs_V1_ResourceLogs]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Logs_V1_ResourceLogs {
  public var resource: IMQACore.Opentelemetry_Proto_Resource_V1_Resource {
    get
    set
  }
  public var hasResource: Swift.Bool {
    get
  }
  public mutating func clearResource()
  public var scopeLogs: [IMQACore.Opentelemetry_Proto_Logs_V1_ScopeLogs]
  public var schemaURL: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Logs_V1_ScopeLogs {
  public var scope: IMQACore.Opentelemetry_Proto_Common_V1_InstrumentationScope {
    get
    set
  }
  public var hasScope: Swift.Bool {
    get
  }
  public mutating func clearScope()
  public var logRecords: [IMQACore.Opentelemetry_Proto_Logs_V1_LogRecord]
  public var schemaURL: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Logs_V1_LogRecord {
  public var timeUnixNano: Swift.UInt64
  public var observedTimeUnixNano: Swift.UInt64
  public var severityNumber: IMQACore.Opentelemetry_Proto_Logs_V1_SeverityNumber
  public var severityText: Swift.String
  public var body: IMQACore.Opentelemetry_Proto_Common_V1_AnyValue {
    get
    set
  }
  public var hasBody: Swift.Bool {
    get
  }
  public mutating func clearBody()
  public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var droppedAttributesCount: Swift.UInt32
  public var flags: Swift.UInt32
  public var traceID: Foundation.Data
  public var spanID: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_SeverityNumber : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_LogRecordFlags : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_LogsData : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_ResourceLogs : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_ScopeLogs : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_LogRecord : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_SeverityNumber : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_LogRecordFlags : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_LogsData : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Logs_V1_LogsData, rhs: IMQACore.Opentelemetry_Proto_Logs_V1_LogsData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_ResourceLogs : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Logs_V1_ResourceLogs, rhs: IMQACore.Opentelemetry_Proto_Logs_V1_ResourceLogs) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_ScopeLogs : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Logs_V1_ScopeLogs, rhs: IMQACore.Opentelemetry_Proto_Logs_V1_ScopeLogs) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Logs_V1_LogRecord : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Logs_V1_LogRecord, rhs: IMQACore.Opentelemetry_Proto_Logs_V1_LogRecord) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest {
  public var resourceLogs: [IMQACore.Opentelemetry_Proto_Logs_V1_ResourceLogs]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse {
  public var partialSuccess: IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess {
    get
    set
  }
  public var hasPartialSuccess: Swift.Bool {
    get
  }
  public mutating func clearPartialSuccess()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess {
  public var rejectedLogRecords: Swift.Int64
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest, rhs: IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse, rhs: IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess, rhs: IMQACore.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum Opentelemetry_Proto_Metrics_V1_AggregationTemporality : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case unspecified
  case delta
  case cumulative
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_AggregationTemporality : Swift.CaseIterable {
  public static var allCases: [IMQACore.Opentelemetry_Proto_Metrics_V1_AggregationTemporality]
  public typealias AllCases = [IMQACore.Opentelemetry_Proto_Metrics_V1_AggregationTemporality]
}
public enum Opentelemetry_Proto_Metrics_V1_DataPointFlags : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case doNotUse
  case noRecordedValueMask
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_DataPointFlags : Swift.CaseIterable {
  public static var allCases: [IMQACore.Opentelemetry_Proto_Metrics_V1_DataPointFlags]
  public typealias AllCases = [IMQACore.Opentelemetry_Proto_Metrics_V1_DataPointFlags]
}
public struct Opentelemetry_Proto_Metrics_V1_MetricsData {
  public var resourceMetrics: [IMQACore.Opentelemetry_Proto_Metrics_V1_ResourceMetrics]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_ResourceMetrics {
  public var resource: IMQACore.Opentelemetry_Proto_Resource_V1_Resource {
    get
    set
  }
  public var hasResource: Swift.Bool {
    get
  }
  public mutating func clearResource()
  public var scopeMetrics: [IMQACore.Opentelemetry_Proto_Metrics_V1_ScopeMetrics]
  public var schemaURL: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_ScopeMetrics {
  public var scope: IMQACore.Opentelemetry_Proto_Common_V1_InstrumentationScope {
    get
    set
  }
  public var hasScope: Swift.Bool {
    get
  }
  public mutating func clearScope()
  public var metrics: [IMQACore.Opentelemetry_Proto_Metrics_V1_Metric]
  public var schemaURL: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Metric {
  public var name: Swift.String
  public var description_p: Swift.String
  public var unit: Swift.String
  public var data: IMQACore.Opentelemetry_Proto_Metrics_V1_Metric.OneOf_Data?
  public var gauge: IMQACore.Opentelemetry_Proto_Metrics_V1_Gauge {
    get
    set
  }
  public var sum: IMQACore.Opentelemetry_Proto_Metrics_V1_Sum {
    get
    set
  }
  public var histogram: IMQACore.Opentelemetry_Proto_Metrics_V1_Histogram {
    get
    set
  }
  public var exponentialHistogram: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram {
    get
    set
  }
  public var summary: IMQACore.Opentelemetry_Proto_Metrics_V1_Summary {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Data : Swift.Equatable {
    case gauge(IMQACore.Opentelemetry_Proto_Metrics_V1_Gauge)
    case sum(IMQACore.Opentelemetry_Proto_Metrics_V1_Sum)
    case histogram(IMQACore.Opentelemetry_Proto_Metrics_V1_Histogram)
    case exponentialHistogram(IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram)
    case summary(IMQACore.Opentelemetry_Proto_Metrics_V1_Summary)
    public static func == (a: IMQACore.Opentelemetry_Proto_Metrics_V1_Metric.OneOf_Data, b: IMQACore.Opentelemetry_Proto_Metrics_V1_Metric.OneOf_Data) -> Swift.Bool
  }
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Gauge {
  public var dataPoints: [IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Sum {
  public var dataPoints: [IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint]
  public var aggregationTemporality: IMQACore.Opentelemetry_Proto_Metrics_V1_AggregationTemporality
  public var isMonotonic: Swift.Bool
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Histogram {
  public var dataPoints: [IMQACore.Opentelemetry_Proto_Metrics_V1_HistogramDataPoint]
  public var aggregationTemporality: IMQACore.Opentelemetry_Proto_Metrics_V1_AggregationTemporality
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_ExponentialHistogram {
  public var dataPoints: [IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint]
  public var aggregationTemporality: IMQACore.Opentelemetry_Proto_Metrics_V1_AggregationTemporality
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Summary {
  public var dataPoints: [IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_NumberDataPoint {
  public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var startTimeUnixNano: Swift.UInt64
  public var timeUnixNano: Swift.UInt64
  public var value: IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint.OneOf_Value?
  public var asDouble: Swift.Double {
    get
    set
  }
  public var asInt: Swift.Int64 {
    get
    set
  }
  public var exemplars: [IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar]
  public var flags: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Value : Swift.Equatable {
    case asDouble(Swift.Double)
    case asInt(Swift.Int64)
    public static func == (a: IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint.OneOf_Value, b: IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint.OneOf_Value) -> Swift.Bool
  }
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_HistogramDataPoint {
  public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var startTimeUnixNano: Swift.UInt64
  public var timeUnixNano: Swift.UInt64
  public var count: Swift.UInt64
  public var sum: Swift.Double {
    get
    set
  }
  public var hasSum: Swift.Bool {
    get
  }
  public mutating func clearSum()
  public var bucketCounts: [Swift.UInt64]
  public var explicitBounds: [Swift.Double]
  public var exemplars: [IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar]
  public var flags: Swift.UInt32
  public var min: Swift.Double {
    get
    set
  }
  public var hasMin: Swift.Bool {
    get
  }
  public mutating func clearMin()
  public var max: Swift.Double {
    get
    set
  }
  public var hasMax: Swift.Bool {
    get
  }
  public mutating func clearMax()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint {
  public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var startTimeUnixNano: Swift.UInt64
  public var timeUnixNano: Swift.UInt64
  public var count: Swift.UInt64
  public var sum: Swift.Double {
    get
    set
  }
  public var hasSum: Swift.Bool {
    get
  }
  public mutating func clearSum()
  public var scale: Swift.Int32
  public var zeroCount: Swift.UInt64
  public var positive: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets {
    get
    set
  }
  public var hasPositive: Swift.Bool {
    get
  }
  public mutating func clearPositive()
  public var negative: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets {
    get
    set
  }
  public var hasNegative: Swift.Bool {
    get
  }
  public mutating func clearNegative()
  public var flags: Swift.UInt32
  public var exemplars: [IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar]
  public var min: Swift.Double {
    get
    set
  }
  public var hasMin: Swift.Bool {
    get
  }
  public mutating func clearMin()
  public var max: Swift.Double {
    get
    set
  }
  public var hasMax: Swift.Bool {
    get
  }
  public mutating func clearMax()
  public var zeroThreshold: Swift.Double
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public struct Buckets {
    public var offset: Swift.Int32
    public var bucketCounts: [Swift.UInt64]
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_SummaryDataPoint {
  public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var startTimeUnixNano: Swift.UInt64
  public var timeUnixNano: Swift.UInt64
  public var count: Swift.UInt64
  public var sum: Swift.Double
  public var quantileValues: [IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint.ValueAtQuantile]
  public var flags: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public struct ValueAtQuantile {
    public var quantile: Swift.Double
    public var value: Swift.Double
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Exemplar {
  public var filteredAttributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var timeUnixNano: Swift.UInt64
  public var value: IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar.OneOf_Value?
  public var asDouble: Swift.Double {
    get
    set
  }
  public var asInt: Swift.Int64 {
    get
    set
  }
  public var spanID: Foundation.Data
  public var traceID: Foundation.Data
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum OneOf_Value : Swift.Equatable {
    case asDouble(Swift.Double)
    case asInt(Swift.Int64)
    public static func == (a: IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar.OneOf_Value, b: IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar.OneOf_Value) -> Swift.Bool
  }
  public init()
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_AggregationTemporality : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_DataPointFlags : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_MetricsData : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ResourceMetrics : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ScopeMetrics : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Metric : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Metric.OneOf_Data : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Gauge : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Sum : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Histogram : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Summary : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint.OneOf_Value : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_HistogramDataPoint : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint.ValueAtQuantile : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar.OneOf_Value : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_AggregationTemporality : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_DataPointFlags : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_MetricsData : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_MetricsData, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_MetricsData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ResourceMetrics : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ResourceMetrics, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ResourceMetrics) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ScopeMetrics : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ScopeMetrics, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ScopeMetrics) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Metric : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Metric, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Metric) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Gauge : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Gauge, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Gauge) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Sum : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Sum, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Sum) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Histogram : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Histogram, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Histogram) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Summary : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Summary, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Summary) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_NumberDataPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_HistogramDataPoint : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_HistogramDataPoint, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_HistogramDataPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint.ValueAtQuantile : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint.ValueAtQuantile, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint.ValueAtQuantile) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar, rhs: IMQACore.Opentelemetry_Proto_Metrics_V1_Exemplar) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest {
  public var resourceMetrics: [IMQACore.Opentelemetry_Proto_Metrics_V1_ResourceMetrics]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse {
  public var partialSuccess: IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess {
    get
    set
  }
  public var hasPartialSuccess: Swift.Bool {
    get
  }
  public mutating func clearPartialSuccess()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess {
  public var rejectedDataPoints: Swift.Int64
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest, rhs: IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse, rhs: IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess, rhs: IMQACore.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Opentelemetry_Proto_Resource_V1_Resource {
  public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var droppedAttributesCount: Swift.UInt32
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension IMQACore.Opentelemetry_Proto_Resource_V1_Resource : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Resource_V1_Resource : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Resource_V1_Resource, rhs: IMQACore.Opentelemetry_Proto_Resource_V1_Resource) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Opentelemetry_Proto_Trace_V1_TracesData {
  public var resourceSpans: [IMQACore.Opentelemetry_Proto_Trace_V1_ResourceSpans]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Trace_V1_ResourceSpans {
  public var resource: IMQACore.Opentelemetry_Proto_Resource_V1_Resource {
    get
    set
  }
  public var hasResource: Swift.Bool {
    get
  }
  public mutating func clearResource()
  public var scopeSpans: [IMQACore.Opentelemetry_Proto_Trace_V1_ScopeSpans]
  public var schemaURL: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Trace_V1_ScopeSpans {
  public var scope: IMQACore.Opentelemetry_Proto_Common_V1_InstrumentationScope {
    get
    set
  }
  public var hasScope: Swift.Bool {
    get
  }
  public mutating func clearScope()
  public var spans: [IMQACore.Opentelemetry_Proto_Trace_V1_Span]
  public var schemaURL: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Trace_V1_Span {
  public var traceID: Foundation.Data
  public var spanID: Foundation.Data
  public var traceState: Swift.String
  public var parentSpanID: Foundation.Data
  public var name: Swift.String
  public var kind: IMQACore.Opentelemetry_Proto_Trace_V1_Span.SpanKind
  public var startTimeUnixNano: Swift.UInt64
  public var endTimeUnixNano: Swift.UInt64
  public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
  public var droppedAttributesCount: Swift.UInt32
  public var events: [IMQACore.Opentelemetry_Proto_Trace_V1_Span.Event]
  public var droppedEventsCount: Swift.UInt32
  public var links: [IMQACore.Opentelemetry_Proto_Trace_V1_Span.Link]
  public var droppedLinksCount: Swift.UInt32
  public var status: IMQACore.Opentelemetry_Proto_Trace_V1_Status {
    get
    set
  }
  public var hasStatus: Swift.Bool {
    get
  }
  public mutating func clearStatus()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum SpanKind : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case unspecified
    case `internal`
    case server
    case client
    case producer
    case consumer
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public struct Event {
    public var timeUnixNano: Swift.UInt64
    public var name: Swift.String
    public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
    public var droppedAttributesCount: Swift.UInt32
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public struct Link {
    public var traceID: Foundation.Data
    public var spanID: Foundation.Data
    public var traceState: Swift.String
    public var attributes: [IMQACore.Opentelemetry_Proto_Common_V1_KeyValue]
    public var droppedAttributesCount: Swift.UInt32
    public var unknownFields: SwiftProtobuf.UnknownStorage
    public init()
  }
  public init()
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span.SpanKind : Swift.CaseIterable {
  public static var allCases: [IMQACore.Opentelemetry_Proto_Trace_V1_Span.SpanKind]
  public typealias AllCases = [IMQACore.Opentelemetry_Proto_Trace_V1_Span.SpanKind]
}
public struct Opentelemetry_Proto_Trace_V1_Status {
  public var message: Swift.String
  public var code: IMQACore.Opentelemetry_Proto_Trace_V1_Status.StatusCode
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum StatusCode : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case unset
    case ok
    case error
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Status.StatusCode : Swift.CaseIterable {
  public static var allCases: [IMQACore.Opentelemetry_Proto_Trace_V1_Status.StatusCode]
  public typealias AllCases = [IMQACore.Opentelemetry_Proto_Trace_V1_Status.StatusCode]
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_TracesData : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_ResourceSpans : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_ScopeSpans : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span.SpanKind : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span.Event : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span.Link : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Status : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Status.StatusCode : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_TracesData : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Trace_V1_TracesData, rhs: IMQACore.Opentelemetry_Proto_Trace_V1_TracesData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_ResourceSpans : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Trace_V1_ResourceSpans, rhs: IMQACore.Opentelemetry_Proto_Trace_V1_ResourceSpans) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_ScopeSpans : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Trace_V1_ScopeSpans, rhs: IMQACore.Opentelemetry_Proto_Trace_V1_ScopeSpans) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Trace_V1_Span, rhs: IMQACore.Opentelemetry_Proto_Trace_V1_Span) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span.SpanKind : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span.Event : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Trace_V1_Span.Event, rhs: IMQACore.Opentelemetry_Proto_Trace_V1_Span.Event) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Span.Link : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Trace_V1_Span.Link, rhs: IMQACore.Opentelemetry_Proto_Trace_V1_Span.Link) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Status : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Trace_V1_Status, rhs: IMQACore.Opentelemetry_Proto_Trace_V1_Status) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Trace_V1_Status.StatusCode : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
public struct Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest {
  public var resourceSpans: [IMQACore.Opentelemetry_Proto_Trace_V1_ResourceSpans]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse {
  public var partialSuccess: IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess {
    get
    set
  }
  public var hasPartialSuccess: Swift.Bool {
    get
  }
  public mutating func clearPartialSuccess()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess {
  public var rejectedSpans: Swift.Int64
  public var errorMessage: Swift.String
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess : @unchecked Swift.Sendable {
}
extension IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest, rhs: IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse, rhs: IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess, rhs: IMQACore.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.Data {
  public func compress(withAlgorithm algo: Foundation.Data.CompressionAlgorithm) -> Foundation.Data?
  public func decompress(withAlgorithm algo: Foundation.Data.CompressionAlgorithm) -> Foundation.Data?
  public enum CompressionAlgorithm {
    case zlib
    case lzfse
    case lzma
    case lz4
    public static func == (a: Foundation.Data.CompressionAlgorithm, b: Foundation.Data.CompressionAlgorithm) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func deflate() -> Foundation.Data?
  public func inflate() -> Foundation.Data?
  public func zip() -> Foundation.Data?
  public func unzip(skipCheckSumValidation: Swift.Bool = true) -> Foundation.Data?
  public func gzip() -> Foundation.Data?
  public func gunzip() -> Foundation.Data?
}
@_hasMissingDesignatedInitializers public class ApplicationResourceProvider : IMQACore.ResourceProvider {
  public init(source: any IMQACore.IApplicationDataSource)
  override public var attributes: [Swift.String : OpenTelemetryApi.AttributeValue] {
    get
  }
  @objc deinit
}
public class ApplicationDataSource : IMQACore.IApplicationDataSource {
  public init()
  public var name: Swift.String? {
    get
  }
  public var identifier: Swift.String? {
    get
  }
  public var version: Swift.String? {
    get
  }
  public var build: Swift.String? {
    get
  }
  @objc deinit
}
public class DeviceDataSource : IMQACore.IDeviceDataSource {
  public init()
  public var model: Swift.String? {
    get
  }
  public var identifier: Swift.String? {
    get
  }
  @objc deinit
}
public protocol IApplicationDataSource {
  var name: Swift.String? { get }
  var identifier: Swift.String? { get }
  var version: Swift.String? { get }
  var build: Swift.String? { get }
}
public protocol IDeviceDataSource {
  var identifier: Swift.String? { get }
  var model: Swift.String? { get }
}
public protocol IOperatingSystemDataSource {
  var type: Swift.String { get }
  var description: Swift.String { get }
  var name: Swift.String { get }
  var version: Swift.String { get }
}
public protocol ITelemetryDataSource {
  var version: Swift.String? { get }
  var name: Swift.String { get }
  var language: Swift.String { get }
}
public class OperatingSystemDataSource : IMQACore.IOperatingSystemDataSource {
  public init()
  public var description: Swift.String {
    get
  }
  public var type: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var version: Swift.String {
    get
  }
  @objc deinit
}
public class TelemetryDataSource : IMQACore.ITelemetryDataSource {
  public init()
  public var language: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var version: Swift.String? {
    get
  }
  @objc deinit
}
public class DefaultResources {
  public init()
  public func get() -> OpenTelemetrySdk.Resource
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DeviceResourceProvider : IMQACore.ResourceProvider {
  public init(source: any IMQACore.IDeviceDataSource)
  override public var attributes: [Swift.String : OpenTelemetryApi.AttributeValue] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OSResourceProvider : IMQACore.ResourceProvider {
  public init(source: any IMQACore.IOperatingSystemDataSource)
  override public var attributes: [Swift.String : OpenTelemetryApi.AttributeValue] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ResourceProvider {
  public var attributes: [Swift.String : OpenTelemetryApi.AttributeValue] {
    get
  }
  public func create() -> OpenTelemetrySdk.Resource
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TelemetryResourceProvider : IMQACore.ResourceProvider {
  public init(source: any IMQACore.ITelemetryDataSource)
  override public var attributes: [Swift.String : OpenTelemetryApi.AttributeValue] {
    get
  }
  @objc deinit
}
extension IMQACore.IMQAUpload {
  public enum StorageMechanism {
    case inMemory(name: Swift.String)
    case onDisk(baseURL: Foundation.URL, fileName: Swift.String)
  }
  public class CacheOptions {
    public var cacheLimit: Swift.UInt
    public var cacheDaysLimit: Swift.UInt
    public var cacheSizeLimit: Swift.UInt
    public init?(cacheBaseUrl: Foundation.URL, cacheFileName: Swift.String = "db.sqlite", cacheLimit: Swift.UInt = 0, cacheDaysLimit: Swift.UInt = 0, cacheSizeLimit: Swift.UInt = 0)
    public init(named: Swift.String, cacheLimit: Swift.UInt = 0, cacheDaysLimit: Swift.UInt = 0, cacheSizeLimit: Swift.UInt = 0)
    @objc deinit
  }
}
extension IMQACore.IMQAUpload.CacheOptions {
  public var name: Swift.String? {
    get
  }
  public var baseUrl: Foundation.URL? {
    get
  }
  public var fileName: Swift.String? {
    get
  }
  public var fileURL: Foundation.URL? {
    get
  }
}
extension IMQACore.IMQAUpload {
  public class EndpointOptions {
    final public let spansURL: Foundation.URL
    final public let logsURL: Foundation.URL
    public init(spansURL: Foundation.URL, logsURL: Foundation.URL)
    @objc deinit
  }
}
extension IMQACore.IMQAUpload {
  public class MetadataOptions {
    public var apiKey: Swift.String
    public var userAgent: Swift.String
    public var deviceId: Swift.String
    public init(apiKey: Swift.String, userAgent: Swift.String, deviceId: Swift.String)
    @objc deinit
  }
}
extension IMQACore.IMQAUpload {
  public class Options {
    final public let endpoints: IMQACore.IMQAUpload.EndpointOptions
    final public let cache: IMQACore.IMQAUpload.CacheOptions
    final public let metadata: IMQACore.IMQAUpload.MetadataOptions
    final public let redundancy: IMQACore.IMQAUpload.RedundancyOptions
    final public let urlSessionConfiguration: Foundation.URLSessionConfiguration
    public init(endpoints: IMQACore.IMQAUpload.EndpointOptions, cache: IMQACore.IMQAUpload.CacheOptions, metadata: IMQACore.IMQAUpload.MetadataOptions, redundancy: IMQACore.IMQAUpload.RedundancyOptions = RedundancyOptions(), urlSessionConfiguration: Foundation.URLSessionConfiguration? = nil)
    @objc deinit
  }
}
extension IMQACore.IMQAUpload {
  public class RedundancyOptions {
    public var automaticRetryCount: Swift.Int
    public var retryOnInternetConnected: Swift.Bool
    public init(automaticRetryCount: Swift.Int = 0, retryOnInternetConnected: Swift.Bool = true)
    @objc deinit
  }
}
public protocol IMQALogUploader : AnyObject {
  func uploadLog(id: Swift.String, data: Foundation.Data, completion: ((Swift.Result<(), any Swift.Error>) -> Swift.Void)?)
}
public class IMQAUpload : IMQACore.IMQALogUploader {
  public var options: IMQACore.IMQAUpload.Options {
    get
  }
  public var logger: any IMQACore.InternalLogger {
    get
  }
  public var queue: Dispatch.DispatchQueue {
    get
  }
  public init(options: IMQACore.IMQAUpload.Options, logger: any IMQACore.InternalLogger, queue: Dispatch.DispatchQueue) throws
  public func retryCachedData()
  public func uploadSpans(id: Swift.String, data: Foundation.Data, completion: ((Swift.Result<(), any Swift.Error>) -> Swift.Void)?)
  public func uploadLog(id: Swift.String, data: Foundation.Data, completion: ((Swift.Result<(), any Swift.Error>) -> Swift.Void)?)
  public func uploadCrash(id: Swift.String, data: Foundation.Data, completion: ((Swift.Result<(), any Swift.Error>) -> Swift.Void)?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IMQAUploadCache {
  public func fetchUploadData(id: Swift.String, type: IMQACore.IMQAUploadType) -> IMQACore.UploadDataRecord?
  public func fetchAllUploadData() -> [IMQACore.UploadDataRecord]
  @discardableResult
  public func clearStaleDataIfNeeded() -> Swift.UInt
  @objc deinit
}
public enum IMQAUploadErrorCode : Swift.Int {
  case invalidMetadata
  case invalidData
  case operationCancelled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IMQAUploadError : Swift.Error, Swift.Equatable {
  case incorrectStatusCodeError(_: Swift.Int)
  case internalError(_: IMQACore.IMQAUploadErrorCode)
  public static func == (a: IMQACore.IMQAUploadError, b: IMQACore.IMQAUploadError) -> Swift.Bool
}
extension IMQACore.IMQAUploadError : Foundation.LocalizedError, Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
}
public enum IMQAUploadType : Swift.Int {
  case spans
  case logs
  case crash
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct LogAttribute : Swift.Codable {
  public struct Value : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SpanAttribute : Swift.Codable {
  public struct Value : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension IMQACore.SpanAttribute : Swift.Equatable {
  public static func == (lhs: IMQACore.SpanAttribute, rhs: IMQACore.SpanAttribute) -> Swift.Bool
}
extension IMQACore.SpanAttribute.Value : Swift.Equatable {
  public static func == (lhs: IMQACore.SpanAttribute.Value, rhs: IMQACore.SpanAttribute.Value) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class UploadDataRecord : Swift.Codable, IMQACore.VVIdenti {
  public var vvid: Swift.String {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension IMQACore.CaptureServiceState : Swift.Equatable {}
extension IMQACore.CaptureServiceState : Swift.Hashable {}
extension IMQACore.CaptureServiceState : Swift.RawRepresentable {}
extension IMQACore.LastRunState : Swift.Equatable {}
extension IMQACore.LastRunState : Swift.Hashable {}
extension IMQACore.LastRunState : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension IMQACore.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension IMQACore.Reachability.NetworkStatus : Swift.Hashable {}
extension IMQACore.Reachability.Connection : Swift.Equatable {}
extension IMQACore.Reachability.Connection : Swift.Hashable {}
extension IMQACore.MetadataRecordType : Swift.Equatable {}
extension IMQACore.MetadataRecordType : Swift.Hashable {}
extension IMQACore.MetadataRecordType : Swift.RawRepresentable {}
extension IMQACore.MetadataRecordLifespan : Swift.Equatable {}
extension IMQACore.MetadataRecordLifespan : Swift.Hashable {}
extension IMQACore.MetadataRecordLifespan : Swift.RawRepresentable {}
extension IMQACore.CustomCompressionType : Swift.Equatable {}
extension IMQACore.CustomCompressionType : Swift.Hashable {}
extension Foundation.Data.CompressionAlgorithm : Swift.Equatable {}
extension Foundation.Data.CompressionAlgorithm : Swift.Hashable {}
extension IMQACore.IMQAUploadErrorCode : Swift.Equatable {}
extension IMQACore.IMQAUploadErrorCode : Swift.Hashable {}
extension IMQACore.IMQAUploadErrorCode : Swift.RawRepresentable {}
extension IMQACore.IMQAUploadType : Swift.Equatable {}
extension IMQACore.IMQAUploadType : Swift.Hashable {}
extension IMQACore.IMQAUploadType : Swift.RawRepresentable {}
