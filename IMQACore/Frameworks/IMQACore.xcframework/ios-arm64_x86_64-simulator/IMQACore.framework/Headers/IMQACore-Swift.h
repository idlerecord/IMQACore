#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef IMQACORE_SWIFT_H
#define IMQACORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import IMQAOtelInternal;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IMQACore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)


/// Base class for all capture services (this class should never be used directly)
/// In order to make your own <code>CaptureService</code> you should create a subclass and override
/// the necessary methods.
/// A <code>CaptureService</code> is an object that can be passed to the imqa during setup
/// and that will capture and generate data in Open Telemetry format.
/// Multiple <code>CaptureServices</code> can run at the same time and be in charge of handling
/// different types of data.
/// This base class provides the necessary functionality and structure that should be used
/// by all capture services.
SWIFT_CLASS("_TtC8IMQACore14CaptureService")
@interface CaptureService : NSObject
/// This method will be called once when the IMQA SDK starts.
/// You should override this method if your <code>CaptureService</code> needs some sort of
/// setup process before it can start generating data.
- (void)onInstall;
/// This method is called by the IMQA SDK when it’s been setup and started capturing data.
/// You should override this method if your <code>CaptureService</code> needs to do something when started.
- (void)onStart;
/// This method is called by the IMQA SDK when it stops capturing data.
/// You should override this method if your <code>CaptureService</code> needs to do something when stopped.
- (void)onStop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class Options;
@class IMQAURLSessionCaptureService;
@class IMQATapCaptureServiceOptions;
@class IMQATapCaptureService;
@class IMQAViewCaptureService;
@class IMQAWebViewCaptureServiceOptions;
@class IMQAWebViewCaptureService;
@class IMQALowMemoryWarningCaptureService;
@class IMQALowPowerModeCaptureService;
@class IMQAPushNotificationCaptureServiceOptions;
@class PushNotificationCaptureService;

@interface CaptureService (SWIFT_EXTENSION(IMQACore))
/// Returns a <code>URLSessionCaptureService</code> with the given <code>URLSessionCaptureService.Options</code>.
/// \param options <code>URLSessionCaptureService.Options</code> used to configure the service.
///
+ (IMQAURLSessionCaptureService * _Nonnull)urlSessionWithOptions:(Options * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Returns a <code>TapCaptureService</code> with the given <code>TapCaptureService.Options</code>.
/// \param options <code>TapCaptureService.Options</code> used to configure the service.
///
+ (IMQATapCaptureService * _Nonnull)tapWithOptions:(IMQATapCaptureServiceOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Returns a <code>ViewCaptureService</code>.
+ (IMQAViewCaptureService * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Returns a <code>WebViewCaptureService</code> with the given <code>WebViewCaptureService.Options</code>.
/// \param options <code>WebViewCaptureService.Options</code> used to configure the service.
///
+ (IMQAWebViewCaptureService * _Nonnull)webViewWithOptions:(IMQAWebViewCaptureServiceOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Adds a <code>LowMemoryWarningCaptureService</code>.
+ (IMQALowMemoryWarningCaptureService * _Nonnull)lowMemoryWarning SWIFT_WARN_UNUSED_RESULT;
/// Adds a <code>LowPowerModeCaptureService</code>.
+ (IMQALowPowerModeCaptureService * _Nonnull)lowPowerMode SWIFT_WARN_UNUSED_RESULT;
/// Adds a <code>PushNotificationCaptureService</code> with the given <code>PushNotificationCaptureService.Options</code>.
/// \param options <code>PushNotificationCaptureService.Options</code> used to configure the service.
///
+ (PushNotificationCaptureService * _Nonnull)pushNotificationWithOptions:(IMQAPushNotificationCaptureServiceOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
@end


/// Class used to build the list of <code>CaptureServices</code> to be used by the <code>Embrace</code> instance.
SWIFT_CLASS("_TtC8IMQACore21CaptureServiceBuilder")
@interface CaptureServiceBuilder : NSObject
/// Returns the list of <code>CaptureServices</code> generated with this builder.
- (NSArray<CaptureService *> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
/// Adds the given <code>CaptureService</code>.
/// note:
/// If there was another <code>CaptureService</code> already added of the same type, it will be replaced with the new one.
- (nonnull instancetype)add:(CaptureService * _Nonnull)service;
/// Removes a previously added <code>CaptureService</code> of the given type, if any.
/// \param type Type of the <code>CaptureService</code> to remove.
///
- (nonnull instancetype)removeOfType:(Class _Nonnull)type;
/// Adds the default <code>CaptureServices</code> using their corresponding default options.
/// The default services are: <code>URLSessionCaptureService</code>, <code>TapCaptureService</code>, <code>ViewCaptureService</code>,
/// <code>WebViewCaptureService</code>, <code>LowMemoryWarningCaptureService</code> and <code>LowPowerModeCaptureService</code>.
/// note:
/// Any existing <code>CaptureService</code> previously added will not get replaced by calling this method.
- (nonnull instancetype)addAll;
- (nonnull instancetype)addBasicServices;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The state of a <code>CaptureService</code>
typedef SWIFT_ENUM(NSInteger, CaptureServiceState, open) {
/// Indicates that the service has not been installed yet.
  CaptureServiceStateUninstalled = 0,
/// Indicates that the service has been initialized.
/// This state can be used to set up necessary dependencies or perform required
/// modifications (e.g., method swizzling) to enable the service to gather
/// data when needed.
/// important:
/// This does not necessarily imply that the service is active.
  CaptureServiceStateInstalled = 1,
/// Indicates that the service is active and capturing data.
  CaptureServiceStateActive = 2,
/// Indicates that the service is initialized but is not actively capturing data.
  CaptureServiceStatePaused = 3,
};


SWIFT_CLASS("_TtC8IMQACore11CrashReport")
@interface CrashReport : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
@class CrashReporterContext;
@protocol InternalLogger;
enum LastRunState : NSInteger;

SWIFT_PROTOCOL("_TtP8IMQACore13CrashReporter_")
@protocol CrashReporter
@property (nonatomic, copy) NSString * _Nullable currentSessionId;
- (void)installWithContext:(CrashReporterContext * _Nonnull)context logger:(id <InternalLogger> _Nonnull)logger;
- (enum LastRunState)getLastRunState SWIFT_WARN_UNUSED_RESULT;
- (void)fetchUnsentCrashReportsWithCompletion:(void (^ _Nonnull)(NSArray<CrashReport *> * _Nonnull))completion;
- (void)deleteCrashReportWithId:(NSInteger)id;
- (void)deleteAllCrashReport;
@property (nonatomic, copy) void (^ _Nullable onNewReport)(CrashReport * _Nonnull);
@end


/// Object passed to the active crash reporter during setup
SWIFT_CLASS("_TtC8IMQACore20CrashReporterContext")
@interface CrashReporterContext : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Special <code>CrashReporter</code> implementation that captures crash data from Crashlytics reports.
SWIFT_CLASS("_TtC8IMQACore19CrashlyticsReporter")
@interface CrashlyticsReporter : NSObject <CrashReporter>
- (nonnull instancetype)init;
/// Sets the current session identifier that will be included in a crash report.
@property (nonatomic, copy) NSString * _Nullable currentSessionId;
/// Block called when there’s a new report to upload
@property (nonatomic, copy) void (^ _Nullable onNewReport)(CrashReport * _Nonnull);
/// Always returns <code>.invalid</code>
- (enum LastRunState)getLastRunState SWIFT_WARN_UNUSED_RESULT;
- (void)installWithContext:(CrashReporterContext * _Nonnull)context logger:(id <InternalLogger> _Nonnull)logger;
/// Unused
- (void)fetchUnsentCrashReportsWithCompletion:(void (^ _Nonnull)(NSArray<CrashReport *> * _Nonnull))completion;
/// Unused
- (void)deleteCrashReportWithId:(NSInteger)id;
/// deleteallcrashReport
- (void)deleteAllCrashReport;
@end



SWIFT_CLASS_NAMED("DefaultPowerModeProvider")
@interface IMQADefaultPowerModeProvider : NSObject
@property (nonatomic, readonly) BOOL isLowPowerModeEnabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class IMQAOptions;

SWIFT_CLASS("_TtC8IMQACore4IMQA")
@interface IMQA : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) IMQA * _Nullable client;)
+ (IMQA * _Nullable)client SWIFT_WARN_UNUSED_RESULT;
+ (void)setClient:(IMQA * _Nullable)value;
@property (nonatomic, readonly, strong) IMQAOptions * _Nonnull options;
/// SDK가 시작되였는가
@property (nonatomic, readonly) BOOL started;
/// log level
@property (nonatomic) enum LogLevel logLevel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface IMQA (SWIFT_EXTENSION(IMQACore))
@end


SWIFT_CLASS_NAMED("Endpoints")
@interface IMQAEndpoits : NSObject
/// The base URL to upload session data
@property (nonatomic, readonly, copy) NSString * _Nonnull baseURL;
- (nonnull instancetype)initWithCollectorURL:(NSString * _Nonnull)collectorURL OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface IMQA (SWIFT_EXTENSION(IMQACore))
@end


/// Class used to setup the IMQA SDK.
SWIFT_CLASS_NAMED("Options")
@interface IMQAOptions : NSObject
- (nonnull instancetype)initWithServiceKey:(NSString * _Nonnull)serviceKey endpoints:(IMQAEndpoits * _Nullable)endpoints sampleRate:(double)sampleRate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface IMQA (SWIFT_EXTENSION(IMQACore))
- (NSString * _Nullable)currentSessionId SWIFT_WARN_UNUSED_RESULT;
@end


@interface IMQA (SWIFT_EXTENSION(IMQACore))
- (IMQA * _Nullable)startAndReturnError:(NSError * _Nullable * _Nullable)error;
+ (IMQA * _Nullable)setupWithOptions:(IMQAOptions * _Nonnull)options error:(NSError * _Nullable * _Nullable)error;
@end


enum IMQALogLevel : NSInteger;
@class WKUserContentController;

@interface IMQA (SWIFT_EXTENSION(IMQACore))
/// UserId 저장
/// \param id id
///
+ (void)setUserIdWithId:(NSString * _Nullable)id;
/// UserId 회득
///
/// returns:
/// id
+ (NSString * _Nullable)getUserId SWIFT_WARN_UNUSED_RESULT;
/// custom 로그
/// \param level 로그 레별
///
/// \param message 메세지
///
+ (void)customLogWithLevel:(enum IMQALogLevel)level message:(NSString * _Nonnull)message;
/// session 공용여부
/// \param session webview에서 session 공용여부
///
+ (void)setSharedSessionWithSession:(BOOL)session;
/// webview를 띄울때 꼭 호출해야 하는 함수
/// \param userContentController userContentController
///
+ (void)setWebviewConfigurationWithUserContentController:(WKUserContentController * _Nonnull)userContentController;
+ (void)setAdvancedNetworkCaptureWithIsCapture:(BOOL)isCapture;
@end


@class NSBundle;

SWIFT_CLASS("_TtC8IMQACore17IMQACoreResources")
@interface IMQACoreResources : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8IMQACore17IMQACrashReporter")
@interface IMQACrashReporter : NSObject <CrashReporter>
/// Sets the current session identifier that will be included in a crash report.
@property (nonatomic, copy) NSString * _Nullable currentSessionId;
/// Unused in this KSCrash implementation
@property (nonatomic, copy) void (^ _Nullable onNewReport)(CrashReport * _Nonnull);
/// Used to determine if the last session ended cleanly or in a crash.
- (enum LastRunState)getLastRunState SWIFT_WARN_UNUSED_RESULT;
- (void)installWithContext:(CrashReporterContext * _Nonnull)context logger:(id <InternalLogger> _Nonnull)logger;
/// Fetches all saved <code>CrashReports</code>.
/// \param completion Completion handler to be called with the fetched <code>CrashReports</code>
///
- (void)fetchUnsentCrashReportsWithCompletion:(void (^ _Nonnull)(NSArray<CrashReport *> * _Nonnull))completion;
/// Permanently deletes a crash report for the given identifier.
/// \param id Identifier of the report to delete
///
- (void)deleteCrashReportWithId:(NSInteger)id;
- (void)deleteAllCrashReport;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



typedef SWIFT_ENUM(NSInteger, IMQALogLevel, open) {
  IMQALogLevelNone = 0,
  IMQALogLevelTrace = 1,
  IMQALogLevelDebug = 2,
  IMQALogLevelInfo = 3,
  IMQALogLevelWarning = 4,
  IMQALogLevelError = 5,
};


SWIFT_PROTOCOL("_TtP8IMQACore14InternalLogger_")
@protocol InternalLogger
- (BOOL)logWithLevel:(enum LogLevel)level message:(NSString * _Nonnull)message attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes;
- (BOOL)logWithLevel:(enum LogLevel)level message:(NSString * _Nonnull)message;
- (BOOL)trace:(NSString * _Nonnull)message attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes;
- (BOOL)trace:(NSString * _Nonnull)message;
- (BOOL)debug:(NSString * _Nonnull)message attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes;
- (BOOL)debug:(NSString * _Nonnull)message;
- (BOOL)info:(NSString * _Nonnull)message attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes;
- (BOOL)info:(NSString * _Nonnull)message;
- (BOOL)warning:(NSString * _Nonnull)message attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes;
- (BOOL)warning:(NSString * _Nonnull)message;
- (BOOL)error:(NSString * _Nonnull)message attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes;
- (BOOL)error:(NSString * _Nonnull)message;
@end

typedef SWIFT_ENUM(NSInteger, LastRunState, open) {
  LastRunStateUnavailable = 0,
  LastRunStateCrash = 1,
  LastRunStateCleanExit = 2,
};


/// Service that generates OpenTelemetry span events when the application receives a low memory warning.
SWIFT_CLASS_NAMED("LowMemoryWarningCaptureService")
@interface IMQALowMemoryWarningCaptureService : CaptureService
- (void)onInstall;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Service that generates OpenTelemetry spans when the phone is running in low power mode.
SWIFT_CLASS_NAMED("LowPowerModeCaptureService")
@interface IMQALowPowerModeCaptureService : CaptureService
- (void)onInstall;
- (void)onStart;
- (void)onStop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8IMQACore25NetworkPayloadCaptureRule")
@interface NetworkPayloadCaptureRule : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC8IMQACore21OpenTelemetryExporter")
@interface OpenTelemetryExporter : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Service that generates OpenTelemetry span events when notifications are received through the <code>UNUserNotificationCenter</code>.
SWIFT_CLASS("_TtC8IMQACore30PushNotificationCaptureService")
@interface PushNotificationCaptureService : CaptureService
@property (nonatomic, readonly, strong) IMQAPushNotificationCaptureServiceOptions * _Nonnull options;
- (nonnull instancetype)initWithOptions:(IMQAPushNotificationCaptureServiceOptions * _Nonnull)options;
- (nonnull instancetype)init;
- (void)onInstall;
@end


@interface PushNotificationCaptureService (SWIFT_EXTENSION(IMQACore))
@end


/// Class used to setup a WebViewCaptureService.
SWIFT_CLASS_NAMED("Options")
@interface IMQAPushNotificationCaptureServiceOptions : NSObject
/// Defines wether or not the IMQA SDK should capture the data from the push notifications
@property (nonatomic, readonly) BOOL captureData;
- (nonnull instancetype)initWithCaptureData:(BOOL)captureData OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end


/// Class used to represent a Push Notification as a SpanEvent.
/// Usage example:
/// <code>Embrace.client?.add(.push(userInfo: apsDictionary))</code>
SWIFT_CLASS_NAMED("PushNotificationEvent")
@interface IMQAPushNotificationEvent : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Service that generates OpenTelemetry span events for taps on the screen.
/// Note that any taps done on a keyboard view will be automatically ignored.
SWIFT_CLASS_NAMED("TapCaptureService")
@interface IMQATapCaptureService : CaptureService
- (nonnull instancetype)initWithOptions:(IMQATapCaptureServiceOptions * _Nonnull)options;
- (void)onInstall;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface IMQATapCaptureService (SWIFT_EXTENSION(IMQACore))
@end

@protocol IMQATapCaptureServiceDelegate;

/// Class used to setup a TapCaptureService.
SWIFT_CLASS_NAMED("Options")
@interface IMQATapCaptureServiceOptions : NSObject
/// Defines a list of UIView types to be ignored by this service. Any taps done on views of these types will not be recorded.
@property (nonatomic, readonly, copy) NSArray<Class> * _Nonnull ignoredViewTypes;
/// Defines wether the service should capture the coordinates of the taps.
@property (nonatomic, readonly) BOOL captureTapCoordinates;
/// Delegate used to decide if each individual tap should be recorded or not.
@property (nonatomic, readonly, strong) id <IMQATapCaptureServiceDelegate> _Nullable delegate;
- (nonnull instancetype)initWithIgnoredViewTypes:(NSArray<Class> * _Nonnull)ignoredViewTypes captureTapCoordinates:(BOOL)captureTapCoordinates delegate:(id <IMQATapCaptureServiceDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end

@class UIView;

/// Delegate used to control which taps are allowed to be captured by a <code>TapCaptureService</code>.
SWIFT_PROTOCOL_NAMED("TapCaptureServiceDelegate")
@protocol IMQATapCaptureServiceDelegate <NSObject>
- (BOOL)shouldCaptureTapOnView:(UIView * _Nonnull)onView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldCaptureTapCoordinatesOnView:(UIView * _Nonnull)onView SWIFT_WARN_UNUSED_RESULT;
@end



/// Service that generates OpenTelemetry spans for network requests that use <code>URLSession</code>.
SWIFT_CLASS_NAMED("URLSessionCaptureService")
@interface IMQAURLSessionCaptureService : CaptureService
- (nonnull instancetype)initWithOptions:(Options * _Nonnull)options;
- (nonnull instancetype)init;
- (void)onInstall;
@end


@interface IMQAURLSessionCaptureService (SWIFT_EXTENSION(IMQACore))
@end

@class NSURLRequest;

/// This protocol can be used to modify requests before the Embrace SDK
/// captures their data into OTel spans.
/// Example:
/// This could be useful if you need to obfuscate certain parts of a request path
/// if it contains sensitive data.
SWIFT_PROTOCOL("_TtP8IMQACore28URLSessionRequestsDataSource_")
@protocol URLSessionRequestsDataSource <NSObject>
- (NSURLRequest * _Nonnull)modifiedRequestFor:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
@end


@class IMQAViewCaptureServiceOptions;

/// Service that generates OpenTelemetry spans for <code>UIViewControllers</code>.
SWIFT_CLASS_NAMED("ViewCaptureService")
@interface IMQAViewCaptureService : CaptureService
- (nonnull instancetype)initWithOptions:(IMQAViewCaptureServiceOptions * _Nonnull)options;
- (nonnull instancetype)init;
- (void)onInstall;
@end


@interface IMQAViewCaptureService (SWIFT_EXTENSION(IMQACore))
@end


/// Class used to setup a <code>ViewCaptureService</code>.
SWIFT_CLASS_NAMED("Options")
@interface IMQAViewCaptureServiceOptions : NSObject
/// When enabled, the capture service will generate spans that measure the visible period of a <code>UIViewController</code>.
/// The spans start  on <code>viewDidAppear</code> and end on <code>viewDidDisappear</code>.
@property (nonatomic, readonly) BOOL instrumentVisibility;
/// When enabled, the capture service will generate spans that measure the loading process of a <code>UIViewController</code>
/// until it renders for the first time.
/// The parent span (<code>time-to-first-render</code>) starts on <code>viewDidLoad</code> and ends on <code>viewDidAppear</code>.
/// This span will contain contain child spans measuring each step in the process (<code>viewDidLoad</code>, <code>viewWillAppear</code> and <code>viewDidDisappear</code>).
/// If the <code>UIViewController</code> follows the <code>InstrumentableViewController</code> protocol, custom child
/// spans can be added to the parent span as well.
/// If the <code>UIViewController</code> follows the <code>InteractableViewController</code> protocol, the parent span will end
/// when the view is ready to be interacted instead (<code>time-to-interactive</code>).
/// The implementers will need to call <code>setInteractionReady()</code> on the <code>UIViewController</code> to mark the end time.
/// If the <code>UIViewController</code> disappears before the interaction is set as ready, the span status will be set to <code>error</code>
/// with the <code>userAbandon</code> error code.
@property (nonatomic, readonly) BOOL instrumentFirstRender;
- (nonnull instancetype)initWithInstrumentVisibility:(BOOL)instrumentVisibility instrumentFirstRender:(BOOL)instrumentFirstRender OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end



/// Service that generates OpenTelemetry span events when a <code>WKWebView</code> loads an URL or throws an error.
SWIFT_CLASS_NAMED("WebViewCaptureService")
@interface IMQAWebViewCaptureService : CaptureService
@property (nonatomic, readonly, strong) IMQAWebViewCaptureServiceOptions * _Nonnull options;
- (nonnull instancetype)initWithOptions:(IMQAWebViewCaptureServiceOptions * _Nonnull)options;
- (nonnull instancetype)init;
- (void)onInstall;
@end


@interface IMQAWebViewCaptureService (SWIFT_EXTENSION(IMQACore))
@end


/// Class used to setup a WebViewCaptureService.
SWIFT_CLASS_NAMED("Options")
@interface IMQAWebViewCaptureServiceOptions : NSObject
/// Defines wether or not the Embrace SDK should remove the query params when capturing URLs from a web view.
@property (nonatomic, readonly) BOOL stripQueryParams;
- (nonnull instancetype)initWithStripQueryParams:(BOOL)stripQueryParams OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef IMQACORE_SWIFT_H
#define IMQACORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import IMQAOtelInternal;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="IMQACore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)


/// Base class for all capture services (this class should never be used directly)
/// In order to make your own <code>CaptureService</code> you should create a subclass and override
/// the necessary methods.
/// A <code>CaptureService</code> is an object that can be passed to the imqa during setup
/// and that will capture and generate data in Open Telemetry format.
/// Multiple <code>CaptureServices</code> can run at the same time and be in charge of handling
/// different types of data.
/// This base class provides the necessary functionality and structure that should be used
/// by all capture services.
SWIFT_CLASS("_TtC8IMQACore14CaptureService")
@interface CaptureService : NSObject
/// This method will be called once when the IMQA SDK starts.
/// You should override this method if your <code>CaptureService</code> needs some sort of
/// setup process before it can start generating data.
- (void)onInstall;
/// This method is called by the IMQA SDK when it’s been setup and started capturing data.
/// You should override this method if your <code>CaptureService</code> needs to do something when started.
- (void)onStart;
/// This method is called by the IMQA SDK when it stops capturing data.
/// You should override this method if your <code>CaptureService</code> needs to do something when stopped.
- (void)onStop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class Options;
@class IMQAURLSessionCaptureService;
@class IMQATapCaptureServiceOptions;
@class IMQATapCaptureService;
@class IMQAViewCaptureService;
@class IMQAWebViewCaptureServiceOptions;
@class IMQAWebViewCaptureService;
@class IMQALowMemoryWarningCaptureService;
@class IMQALowPowerModeCaptureService;
@class IMQAPushNotificationCaptureServiceOptions;
@class PushNotificationCaptureService;

@interface CaptureService (SWIFT_EXTENSION(IMQACore))
/// Returns a <code>URLSessionCaptureService</code> with the given <code>URLSessionCaptureService.Options</code>.
/// \param options <code>URLSessionCaptureService.Options</code> used to configure the service.
///
+ (IMQAURLSessionCaptureService * _Nonnull)urlSessionWithOptions:(Options * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Returns a <code>TapCaptureService</code> with the given <code>TapCaptureService.Options</code>.
/// \param options <code>TapCaptureService.Options</code> used to configure the service.
///
+ (IMQATapCaptureService * _Nonnull)tapWithOptions:(IMQATapCaptureServiceOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Returns a <code>ViewCaptureService</code>.
+ (IMQAViewCaptureService * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Returns a <code>WebViewCaptureService</code> with the given <code>WebViewCaptureService.Options</code>.
/// \param options <code>WebViewCaptureService.Options</code> used to configure the service.
///
+ (IMQAWebViewCaptureService * _Nonnull)webViewWithOptions:(IMQAWebViewCaptureServiceOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Adds a <code>LowMemoryWarningCaptureService</code>.
+ (IMQALowMemoryWarningCaptureService * _Nonnull)lowMemoryWarning SWIFT_WARN_UNUSED_RESULT;
/// Adds a <code>LowPowerModeCaptureService</code>.
+ (IMQALowPowerModeCaptureService * _Nonnull)lowPowerMode SWIFT_WARN_UNUSED_RESULT;
/// Adds a <code>PushNotificationCaptureService</code> with the given <code>PushNotificationCaptureService.Options</code>.
/// \param options <code>PushNotificationCaptureService.Options</code> used to configure the service.
///
+ (PushNotificationCaptureService * _Nonnull)pushNotificationWithOptions:(IMQAPushNotificationCaptureServiceOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
@end


/// Class used to build the list of <code>CaptureServices</code> to be used by the <code>Embrace</code> instance.
SWIFT_CLASS("_TtC8IMQACore21CaptureServiceBuilder")
@interface CaptureServiceBuilder : NSObject
/// Returns the list of <code>CaptureServices</code> generated with this builder.
- (NSArray<CaptureService *> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
/// Adds the given <code>CaptureService</code>.
/// note:
/// If there was another <code>CaptureService</code> already added of the same type, it will be replaced with the new one.
- (nonnull instancetype)add:(CaptureService * _Nonnull)service;
/// Removes a previously added <code>CaptureService</code> of the given type, if any.
/// \param type Type of the <code>CaptureService</code> to remove.
///
- (nonnull instancetype)removeOfType:(Class _Nonnull)type;
/// Adds the default <code>CaptureServices</code> using their corresponding default options.
/// The default services are: <code>URLSessionCaptureService</code>, <code>TapCaptureService</code>, <code>ViewCaptureService</code>,
/// <code>WebViewCaptureService</code>, <code>LowMemoryWarningCaptureService</code> and <code>LowPowerModeCaptureService</code>.
/// note:
/// Any existing <code>CaptureService</code> previously added will not get replaced by calling this method.
- (nonnull instancetype)addAll;
- (nonnull instancetype)addBasicServices;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The state of a <code>CaptureService</code>
typedef SWIFT_ENUM(NSInteger, CaptureServiceState, open) {
/// Indicates that the service has not been installed yet.
  CaptureServiceStateUninstalled = 0,
/// Indicates that the service has been initialized.
/// This state can be used to set up necessary dependencies or perform required
/// modifications (e.g., method swizzling) to enable the service to gather
/// data when needed.
/// important:
/// This does not necessarily imply that the service is active.
  CaptureServiceStateInstalled = 1,
/// Indicates that the service is active and capturing data.
  CaptureServiceStateActive = 2,
/// Indicates that the service is initialized but is not actively capturing data.
  CaptureServiceStatePaused = 3,
};


SWIFT_CLASS("_TtC8IMQACore11CrashReport")
@interface CrashReport : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
@class CrashReporterContext;
@protocol InternalLogger;
enum LastRunState : NSInteger;

SWIFT_PROTOCOL("_TtP8IMQACore13CrashReporter_")
@protocol CrashReporter
@property (nonatomic, copy) NSString * _Nullable currentSessionId;
- (void)installWithContext:(CrashReporterContext * _Nonnull)context logger:(id <InternalLogger> _Nonnull)logger;
- (enum LastRunState)getLastRunState SWIFT_WARN_UNUSED_RESULT;
- (void)fetchUnsentCrashReportsWithCompletion:(void (^ _Nonnull)(NSArray<CrashReport *> * _Nonnull))completion;
- (void)deleteCrashReportWithId:(NSInteger)id;
- (void)deleteAllCrashReport;
@property (nonatomic, copy) void (^ _Nullable onNewReport)(CrashReport * _Nonnull);
@end


/// Object passed to the active crash reporter during setup
SWIFT_CLASS("_TtC8IMQACore20CrashReporterContext")
@interface CrashReporterContext : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Special <code>CrashReporter</code> implementation that captures crash data from Crashlytics reports.
SWIFT_CLASS("_TtC8IMQACore19CrashlyticsReporter")
@interface CrashlyticsReporter : NSObject <CrashReporter>
- (nonnull instancetype)init;
/// Sets the current session identifier that will be included in a crash report.
@property (nonatomic, copy) NSString * _Nullable currentSessionId;
/// Block called when there’s a new report to upload
@property (nonatomic, copy) void (^ _Nullable onNewReport)(CrashReport * _Nonnull);
/// Always returns <code>.invalid</code>
- (enum LastRunState)getLastRunState SWIFT_WARN_UNUSED_RESULT;
- (void)installWithContext:(CrashReporterContext * _Nonnull)context logger:(id <InternalLogger> _Nonnull)logger;
/// Unused
- (void)fetchUnsentCrashReportsWithCompletion:(void (^ _Nonnull)(NSArray<CrashReport *> * _Nonnull))completion;
/// Unused
- (void)deleteCrashReportWithId:(NSInteger)id;
/// deleteallcrashReport
- (void)deleteAllCrashReport;
@end



SWIFT_CLASS_NAMED("DefaultPowerModeProvider")
@interface IMQADefaultPowerModeProvider : NSObject
@property (nonatomic, readonly) BOOL isLowPowerModeEnabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class IMQAOptions;

SWIFT_CLASS("_TtC8IMQACore4IMQA")
@interface IMQA : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) IMQA * _Nullable client;)
+ (IMQA * _Nullable)client SWIFT_WARN_UNUSED_RESULT;
+ (void)setClient:(IMQA * _Nullable)value;
@property (nonatomic, readonly, strong) IMQAOptions * _Nonnull options;
/// SDK가 시작되였는가
@property (nonatomic, readonly) BOOL started;
/// log level
@property (nonatomic) enum LogLevel logLevel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface IMQA (SWIFT_EXTENSION(IMQACore))
@end


SWIFT_CLASS_NAMED("Endpoints")
@interface IMQAEndpoits : NSObject
/// The base URL to upload session data
@property (nonatomic, readonly, copy) NSString * _Nonnull baseURL;
- (nonnull instancetype)initWithCollectorURL:(NSString * _Nonnull)collectorURL OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface IMQA (SWIFT_EXTENSION(IMQACore))
@end


/// Class used to setup the IMQA SDK.
SWIFT_CLASS_NAMED("Options")
@interface IMQAOptions : NSObject
- (nonnull instancetype)initWithServiceKey:(NSString * _Nonnull)serviceKey endpoints:(IMQAEndpoits * _Nullable)endpoints sampleRate:(double)sampleRate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface IMQA (SWIFT_EXTENSION(IMQACore))
- (NSString * _Nullable)currentSessionId SWIFT_WARN_UNUSED_RESULT;
@end


@interface IMQA (SWIFT_EXTENSION(IMQACore))
- (IMQA * _Nullable)startAndReturnError:(NSError * _Nullable * _Nullable)error;
+ (IMQA * _Nullable)setupWithOptions:(IMQAOptions * _Nonnull)options error:(NSError * _Nullable * _Nullable)error;
@end


enum IMQALogLevel : NSInteger;
@class WKUserContentController;

@interface IMQA (SWIFT_EXTENSION(IMQACore))
/// UserId 저장
/// \param id id
///
+ (void)setUserIdWithId:(NSString * _Nullable)id;
/// UserId 회득
///
/// returns:
/// id
+ (NSString * _Nullable)getUserId SWIFT_WARN_UNUSED_RESULT;
/// custom 로그
/// \param level 로그 레별
///
/// \param message 메세지
///
+ (void)customLogWithLevel:(enum IMQALogLevel)level message:(NSString * _Nonnull)message;
/// session 공용여부
/// \param session webview에서 session 공용여부
///
+ (void)setSharedSessionWithSession:(BOOL)session;
/// webview를 띄울때 꼭 호출해야 하는 함수
/// \param userContentController userContentController
///
+ (void)setWebviewConfigurationWithUserContentController:(WKUserContentController * _Nonnull)userContentController;
+ (void)setAdvancedNetworkCaptureWithIsCapture:(BOOL)isCapture;
@end


@class NSBundle;

SWIFT_CLASS("_TtC8IMQACore17IMQACoreResources")
@interface IMQACoreResources : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull bundle;)
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8IMQACore17IMQACrashReporter")
@interface IMQACrashReporter : NSObject <CrashReporter>
/// Sets the current session identifier that will be included in a crash report.
@property (nonatomic, copy) NSString * _Nullable currentSessionId;
/// Unused in this KSCrash implementation
@property (nonatomic, copy) void (^ _Nullable onNewReport)(CrashReport * _Nonnull);
/// Used to determine if the last session ended cleanly or in a crash.
- (enum LastRunState)getLastRunState SWIFT_WARN_UNUSED_RESULT;
- (void)installWithContext:(CrashReporterContext * _Nonnull)context logger:(id <InternalLogger> _Nonnull)logger;
/// Fetches all saved <code>CrashReports</code>.
/// \param completion Completion handler to be called with the fetched <code>CrashReports</code>
///
- (void)fetchUnsentCrashReportsWithCompletion:(void (^ _Nonnull)(NSArray<CrashReport *> * _Nonnull))completion;
/// Permanently deletes a crash report for the given identifier.
/// \param id Identifier of the report to delete
///
- (void)deleteCrashReportWithId:(NSInteger)id;
- (void)deleteAllCrashReport;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



typedef SWIFT_ENUM(NSInteger, IMQALogLevel, open) {
  IMQALogLevelNone = 0,
  IMQALogLevelTrace = 1,
  IMQALogLevelDebug = 2,
  IMQALogLevelInfo = 3,
  IMQALogLevelWarning = 4,
  IMQALogLevelError = 5,
};


SWIFT_PROTOCOL("_TtP8IMQACore14InternalLogger_")
@protocol InternalLogger
- (BOOL)logWithLevel:(enum LogLevel)level message:(NSString * _Nonnull)message attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes;
- (BOOL)logWithLevel:(enum LogLevel)level message:(NSString * _Nonnull)message;
- (BOOL)trace:(NSString * _Nonnull)message attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes;
- (BOOL)trace:(NSString * _Nonnull)message;
- (BOOL)debug:(NSString * _Nonnull)message attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes;
- (BOOL)debug:(NSString * _Nonnull)message;
- (BOOL)info:(NSString * _Nonnull)message attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes;
- (BOOL)info:(NSString * _Nonnull)message;
- (BOOL)warning:(NSString * _Nonnull)message attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes;
- (BOOL)warning:(NSString * _Nonnull)message;
- (BOOL)error:(NSString * _Nonnull)message attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes;
- (BOOL)error:(NSString * _Nonnull)message;
@end

typedef SWIFT_ENUM(NSInteger, LastRunState, open) {
  LastRunStateUnavailable = 0,
  LastRunStateCrash = 1,
  LastRunStateCleanExit = 2,
};


/// Service that generates OpenTelemetry span events when the application receives a low memory warning.
SWIFT_CLASS_NAMED("LowMemoryWarningCaptureService")
@interface IMQALowMemoryWarningCaptureService : CaptureService
- (void)onInstall;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Service that generates OpenTelemetry spans when the phone is running in low power mode.
SWIFT_CLASS_NAMED("LowPowerModeCaptureService")
@interface IMQALowPowerModeCaptureService : CaptureService
- (void)onInstall;
- (void)onStart;
- (void)onStop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8IMQACore25NetworkPayloadCaptureRule")
@interface NetworkPayloadCaptureRule : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC8IMQACore21OpenTelemetryExporter")
@interface OpenTelemetryExporter : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Service that generates OpenTelemetry span events when notifications are received through the <code>UNUserNotificationCenter</code>.
SWIFT_CLASS("_TtC8IMQACore30PushNotificationCaptureService")
@interface PushNotificationCaptureService : CaptureService
@property (nonatomic, readonly, strong) IMQAPushNotificationCaptureServiceOptions * _Nonnull options;
- (nonnull instancetype)initWithOptions:(IMQAPushNotificationCaptureServiceOptions * _Nonnull)options;
- (nonnull instancetype)init;
- (void)onInstall;
@end


@interface PushNotificationCaptureService (SWIFT_EXTENSION(IMQACore))
@end


/// Class used to setup a WebViewCaptureService.
SWIFT_CLASS_NAMED("Options")
@interface IMQAPushNotificationCaptureServiceOptions : NSObject
/// Defines wether or not the IMQA SDK should capture the data from the push notifications
@property (nonatomic, readonly) BOOL captureData;
- (nonnull instancetype)initWithCaptureData:(BOOL)captureData OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end


/// Class used to represent a Push Notification as a SpanEvent.
/// Usage example:
/// <code>Embrace.client?.add(.push(userInfo: apsDictionary))</code>
SWIFT_CLASS_NAMED("PushNotificationEvent")
@interface IMQAPushNotificationEvent : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Service that generates OpenTelemetry span events for taps on the screen.
/// Note that any taps done on a keyboard view will be automatically ignored.
SWIFT_CLASS_NAMED("TapCaptureService")
@interface IMQATapCaptureService : CaptureService
- (nonnull instancetype)initWithOptions:(IMQATapCaptureServiceOptions * _Nonnull)options;
- (void)onInstall;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface IMQATapCaptureService (SWIFT_EXTENSION(IMQACore))
@end

@protocol IMQATapCaptureServiceDelegate;

/// Class used to setup a TapCaptureService.
SWIFT_CLASS_NAMED("Options")
@interface IMQATapCaptureServiceOptions : NSObject
/// Defines a list of UIView types to be ignored by this service. Any taps done on views of these types will not be recorded.
@property (nonatomic, readonly, copy) NSArray<Class> * _Nonnull ignoredViewTypes;
/// Defines wether the service should capture the coordinates of the taps.
@property (nonatomic, readonly) BOOL captureTapCoordinates;
/// Delegate used to decide if each individual tap should be recorded or not.
@property (nonatomic, readonly, strong) id <IMQATapCaptureServiceDelegate> _Nullable delegate;
- (nonnull instancetype)initWithIgnoredViewTypes:(NSArray<Class> * _Nonnull)ignoredViewTypes captureTapCoordinates:(BOOL)captureTapCoordinates delegate:(id <IMQATapCaptureServiceDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end

@class UIView;

/// Delegate used to control which taps are allowed to be captured by a <code>TapCaptureService</code>.
SWIFT_PROTOCOL_NAMED("TapCaptureServiceDelegate")
@protocol IMQATapCaptureServiceDelegate <NSObject>
- (BOOL)shouldCaptureTapOnView:(UIView * _Nonnull)onView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldCaptureTapCoordinatesOnView:(UIView * _Nonnull)onView SWIFT_WARN_UNUSED_RESULT;
@end



/// Service that generates OpenTelemetry spans for network requests that use <code>URLSession</code>.
SWIFT_CLASS_NAMED("URLSessionCaptureService")
@interface IMQAURLSessionCaptureService : CaptureService
- (nonnull instancetype)initWithOptions:(Options * _Nonnull)options;
- (nonnull instancetype)init;
- (void)onInstall;
@end


@interface IMQAURLSessionCaptureService (SWIFT_EXTENSION(IMQACore))
@end

@class NSURLRequest;

/// This protocol can be used to modify requests before the Embrace SDK
/// captures their data into OTel spans.
/// Example:
/// This could be useful if you need to obfuscate certain parts of a request path
/// if it contains sensitive data.
SWIFT_PROTOCOL("_TtP8IMQACore28URLSessionRequestsDataSource_")
@protocol URLSessionRequestsDataSource <NSObject>
- (NSURLRequest * _Nonnull)modifiedRequestFor:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
@end


@class IMQAViewCaptureServiceOptions;

/// Service that generates OpenTelemetry spans for <code>UIViewControllers</code>.
SWIFT_CLASS_NAMED("ViewCaptureService")
@interface IMQAViewCaptureService : CaptureService
- (nonnull instancetype)initWithOptions:(IMQAViewCaptureServiceOptions * _Nonnull)options;
- (nonnull instancetype)init;
- (void)onInstall;
@end


@interface IMQAViewCaptureService (SWIFT_EXTENSION(IMQACore))
@end


/// Class used to setup a <code>ViewCaptureService</code>.
SWIFT_CLASS_NAMED("Options")
@interface IMQAViewCaptureServiceOptions : NSObject
/// When enabled, the capture service will generate spans that measure the visible period of a <code>UIViewController</code>.
/// The spans start  on <code>viewDidAppear</code> and end on <code>viewDidDisappear</code>.
@property (nonatomic, readonly) BOOL instrumentVisibility;
/// When enabled, the capture service will generate spans that measure the loading process of a <code>UIViewController</code>
/// until it renders for the first time.
/// The parent span (<code>time-to-first-render</code>) starts on <code>viewDidLoad</code> and ends on <code>viewDidAppear</code>.
/// This span will contain contain child spans measuring each step in the process (<code>viewDidLoad</code>, <code>viewWillAppear</code> and <code>viewDidDisappear</code>).
/// If the <code>UIViewController</code> follows the <code>InstrumentableViewController</code> protocol, custom child
/// spans can be added to the parent span as well.
/// If the <code>UIViewController</code> follows the <code>InteractableViewController</code> protocol, the parent span will end
/// when the view is ready to be interacted instead (<code>time-to-interactive</code>).
/// The implementers will need to call <code>setInteractionReady()</code> on the <code>UIViewController</code> to mark the end time.
/// If the <code>UIViewController</code> disappears before the interaction is set as ready, the span status will be set to <code>error</code>
/// with the <code>userAbandon</code> error code.
@property (nonatomic, readonly) BOOL instrumentFirstRender;
- (nonnull instancetype)initWithInstrumentVisibility:(BOOL)instrumentVisibility instrumentFirstRender:(BOOL)instrumentFirstRender OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end



/// Service that generates OpenTelemetry span events when a <code>WKWebView</code> loads an URL or throws an error.
SWIFT_CLASS_NAMED("WebViewCaptureService")
@interface IMQAWebViewCaptureService : CaptureService
@property (nonatomic, readonly, strong) IMQAWebViewCaptureServiceOptions * _Nonnull options;
- (nonnull instancetype)initWithOptions:(IMQAWebViewCaptureServiceOptions * _Nonnull)options;
- (nonnull instancetype)init;
- (void)onInstall;
@end


@interface IMQAWebViewCaptureService (SWIFT_EXTENSION(IMQACore))
@end


/// Class used to setup a WebViewCaptureService.
SWIFT_CLASS_NAMED("Options")
@interface IMQAWebViewCaptureServiceOptions : NSObject
/// Defines wether or not the Embrace SDK should remove the query params when capturing URLs from a web view.
@property (nonatomic, readonly) BOOL stripQueryParams;
- (nonnull instancetype)initWithStripQueryParams:(BOOL)stripQueryParams OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
